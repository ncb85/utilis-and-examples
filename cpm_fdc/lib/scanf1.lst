                              1 ; Small C 8080
                              2 ;	Coder (2.4,84/11/27)
                              3 ;	Front End (2.7,84/11/28)
                              4 ;	Front End for ASXXXX (2.8,13/01/20)
                              5 		;program area SMALLC_GENERATED is RELOCATABLE
                              6 		.module SMALLC_GENERATED
                              7 		.list   (err, loc, bin, eqt, cyc, lin, src, lst, md)
                              8 		.nlist  (pag)
                              9 		.area  SMALLC_GENERATED  (REL,CON,CSEG)
                             10 ;/*
                             11 ; * Core routine for integer-only scanf-type functions
                             12 ; *        only d, o, x, c, s, and u specs are supported.
                             13 ; */
                             14 ;//#include <ctype.h>
                             15 ;#include <stdio.h>
                             16 ;#define stdin 0
                             17 ;#define stdout 1
                             18 ;#define stderr 2
                             19 ;#define NULL 0
                             20 ;#define EOF (-1)
                             21 ;#define FILE char
                             22 ;//#define NULL 0
                             23 ;#define ERR (-1)
                             24 ;extern int _Oldch;
                             25 ;//extern _getc(), _ungetc(), utoi();
                             26 ;_scanf(fd, nxtarg)
   0000                      27 _scanf:
                             28 ;int fd, *nxtarg;
                             29 ;{
                             30 ;    char *carg, *ctl, *unsigned;
   0000 C5            [12]   31 	push	b
   0001 C5            [12]   32 	push	b
   0002 C5            [12]   33 	push	b
                             34 ;    int *narg, wast, ac, width, ch, cnv, base, ovfl, sign;
   0003 C5            [12]   35 	push	b
   0004 C5            [12]   36 	push	b
   0005 C5            [12]   37 	push	b
   0006 C5            [12]   38 	push	b
   0007 C5            [12]   39 	push	b
   0008 C5            [12]   40 	push	b
   0009 C5            [12]   41 	push	b
   000A C5            [12]   42 	push	b
   000B C5            [12]   43 	push	b
                             44 ;    _Oldch = EOF;
   000C 21 01 00      [10]   45 	lxi 	h,#1
   000F CD 00 00      [18]   46 	call	ccneg
   0012 22 00 00      [16]   47 	shld	_Oldch
                             48 ;    ac = 0;
   0015 21 0C 00      [10]   49 	lxi 	h,#12
   0018 39            [10]   50 	dad 	sp
   0019 E5            [12]   51 	push	h
   001A 21 00 00      [10]   52 	lxi 	h,#0
   001D D1            [10]   53 	pop 	d
   001E CD 00 00      [18]   54 	call	ccpint
                             55 ;    ctl = *nxtarg--;
   0021 21 14 00      [10]   56 	lxi 	h,#20
   0024 39            [10]   57 	dad 	sp
   0025 E5            [12]   58 	push	h
   0026 21 1C 00      [10]   59 	lxi 	h,#28
   0029 39            [10]   60 	dad 	sp
   002A E5            [12]   61 	push	h
   002B CD 00 00      [18]   62 	call	ccgint
   002E 2B            [ 6]   63 	dcx 	h
   002F 2B            [ 6]   64 	dcx 	h
   0030 D1            [10]   65 	pop 	d
   0031 CD 00 00      [18]   66 	call	ccpint
   0034 23            [ 6]   67 	inx 	h
   0035 23            [ 6]   68 	inx 	h
   0036 CD 00 00      [18]   69 	call	ccgint
   0039 D1            [10]   70 	pop 	d
   003A CD 00 00      [18]   71 	call	ccpint
                             72 ;    while (*ctl) {
   003D                      73 $2:
   003D 21 14 00      [10]   74 	lxi 	h,#20
   0040 39            [10]   75 	dad 	sp
   0041 CD 00 00      [18]   76 	call	ccgint
   0044 CD 00 00      [18]   77 	call	ccgchar
   0047 7C            [ 4]   78 	mov 	a,h
   0048 B5            [ 4]   79 	ora 	l
   0049 CA FF 04      [10]   80 	jz  	$3
                             81 ;        if (isspace(*ctl)) {
   004C 21 14 00      [10]   82 	lxi 	h,#20
   004F 39            [10]   83 	dad 	sp
   0050 CD 00 00      [18]   84 	call	ccgint
   0053 CD 00 00      [18]   85 	call	ccgchar
   0056 E5            [12]   86 	push	h
   0057 3E 01         [ 7]   87 	mvi 	a,#1
   0059 CD 00 00      [18]   88 	call	isspace
   005C C1            [10]   89 	pop 	b
   005D 7C            [ 4]   90 	mov 	a,h
   005E B5            [ 4]   91 	ora 	l
   005F CA 72 00      [10]   92 	jz  	$4
                             93 ;            ++ctl;
   0062 21 14 00      [10]   94 	lxi 	h,#20
   0065 39            [10]   95 	dad 	sp
   0066 E5            [12]   96 	push	h
   0067 CD 00 00      [18]   97 	call	ccgint
   006A 23            [ 6]   98 	inx 	h
   006B D1            [10]   99 	pop 	d
   006C CD 00 00      [18]  100 	call	ccpint
                            101 ;            continue;
   006F C3 3D 00      [10]  102 	jmp 	$2
                            103 ;        }
                            104 ;        if (*ctl++ != '%') continue;
   0072                     105 $4:
   0072 21 14 00      [10]  106 	lxi 	h,#20
   0075 39            [10]  107 	dad 	sp
   0076 E5            [12]  108 	push	h
   0077 CD 00 00      [18]  109 	call	ccgint
   007A 23            [ 6]  110 	inx 	h
   007B D1            [10]  111 	pop 	d
   007C CD 00 00      [18]  112 	call	ccpint
   007F 2B            [ 6]  113 	dcx 	h
   0080 CD 00 00      [18]  114 	call	ccgchar
   0083 E5            [12]  115 	push	h
   0084 21 25 00      [10]  116 	lxi 	h,#37
   0087 D1            [10]  117 	pop 	d
   0088 CD 00 00      [18]  118 	call	ccne
   008B 7C            [ 4]  119 	mov 	a,h
   008C B5            [ 4]  120 	ora 	l
   008D CA 93 00      [10]  121 	jz  	$5
   0090 C3 3D 00      [10]  122 	jmp 	$2
                            123 ;        if (*ctl == '*') {
   0093                     124 $5:
   0093 21 14 00      [10]  125 	lxi 	h,#20
   0096 39            [10]  126 	dad 	sp
   0097 CD 00 00      [18]  127 	call	ccgint
   009A CD 00 00      [18]  128 	call	ccgchar
   009D E5            [12]  129 	push	h
   009E 21 2A 00      [10]  130 	lxi 	h,#42
   00A1 D1            [10]  131 	pop 	d
   00A2 CD 00 00      [18]  132 	call	cceq
   00A5 7C            [ 4]  133 	mov 	a,h
   00A6 B5            [ 4]  134 	ora 	l
   00A7 CA D0 00      [10]  135 	jz  	$6
                            136 ;            narg = carg = &wast;
   00AA 21 10 00      [10]  137 	lxi 	h,#16
   00AD 39            [10]  138 	dad 	sp
   00AE E5            [12]  139 	push	h
   00AF 21 18 00      [10]  140 	lxi 	h,#24
   00B2 39            [10]  141 	dad 	sp
   00B3 E5            [12]  142 	push	h
   00B4 21 12 00      [10]  143 	lxi 	h,#18
   00B7 39            [10]  144 	dad 	sp
   00B8 D1            [10]  145 	pop 	d
   00B9 CD 00 00      [18]  146 	call	ccpint
   00BC D1            [10]  147 	pop 	d
   00BD CD 00 00      [18]  148 	call	ccpint
                            149 ;            ++ctl;
   00C0 21 14 00      [10]  150 	lxi 	h,#20
   00C3 39            [10]  151 	dad 	sp
   00C4 E5            [12]  152 	push	h
   00C5 CD 00 00      [18]  153 	call	ccgint
   00C8 23            [ 6]  154 	inx 	h
   00C9 D1            [10]  155 	pop 	d
   00CA CD 00 00      [18]  156 	call	ccpint
                            157 ;        } else narg = carg = *nxtarg--;
   00CD C3 F5 00      [10]  158 	jmp 	$7
   00D0                     159 $6:
   00D0 21 10 00      [10]  160 	lxi 	h,#16
   00D3 39            [10]  161 	dad 	sp
   00D4 E5            [12]  162 	push	h
   00D5 21 18 00      [10]  163 	lxi 	h,#24
   00D8 39            [10]  164 	dad 	sp
   00D9 E5            [12]  165 	push	h
   00DA 21 1E 00      [10]  166 	lxi 	h,#30
   00DD 39            [10]  167 	dad 	sp
   00DE E5            [12]  168 	push	h
   00DF CD 00 00      [18]  169 	call	ccgint
   00E2 2B            [ 6]  170 	dcx 	h
   00E3 2B            [ 6]  171 	dcx 	h
   00E4 D1            [10]  172 	pop 	d
   00E5 CD 00 00      [18]  173 	call	ccpint
   00E8 23            [ 6]  174 	inx 	h
   00E9 23            [ 6]  175 	inx 	h
   00EA CD 00 00      [18]  176 	call	ccgint
   00ED D1            [10]  177 	pop 	d
   00EE CD 00 00      [18]  178 	call	ccpint
   00F1 D1            [10]  179 	pop 	d
   00F2 CD 00 00      [18]  180 	call	ccpint
   00F5                     181 $7:
                            182 ;        ctl += utoi(ctl, &width);
   00F5 21 14 00      [10]  183 	lxi 	h,#20
   00F8 39            [10]  184 	dad 	sp
   00F9 E5            [12]  185 	push	h
   00FA CD 00 00      [18]  186 	call	ccgint
   00FD E5            [12]  187 	push	h
   00FE 21 18 00      [10]  188 	lxi 	h,#24
   0101 39            [10]  189 	dad 	sp
   0102 CD 00 00      [18]  190 	call	ccgint
   0105 E5            [12]  191 	push	h
   0106 21 10 00      [10]  192 	lxi 	h,#16
   0109 39            [10]  193 	dad 	sp
   010A E5            [12]  194 	push	h
   010B 3E 02         [ 7]  195 	mvi 	a,#2
   010D CD 00 00      [18]  196 	call	utoi
   0110 C1            [10]  197 	pop 	b
   0111 C1            [10]  198 	pop 	b
   0112 D1            [10]  199 	pop 	d
   0113 19            [10]  200 	dad 	d
   0114 D1            [10]  201 	pop 	d
   0115 CD 00 00      [18]  202 	call	ccpint
                            203 ;        if (!width) width = 32767;
   0118 21 0A 00      [10]  204 	lxi 	h,#10
   011B 39            [10]  205 	dad 	sp
   011C CD 00 00      [18]  206 	call	ccgint
   011F CD 00 00      [18]  207 	call	cclneg
   0122 7C            [ 4]  208 	mov 	a,h
   0123 B5            [ 4]  209 	ora 	l
   0124 CA 33 01      [10]  210 	jz  	$8
   0127 21 0A 00      [10]  211 	lxi 	h,#10
   012A 39            [10]  212 	dad 	sp
   012B E5            [12]  213 	push	h
   012C 21 FF 7F      [10]  214 	lxi 	h,#32767
   012F D1            [10]  215 	pop 	d
   0130 CD 00 00      [18]  216 	call	ccpint
                            217 ;        if (!(cnv = *ctl++)) break;
   0133                     218 $8:
   0133 21 06 00      [10]  219 	lxi 	h,#6
   0136 39            [10]  220 	dad 	sp
   0137 E5            [12]  221 	push	h
   0138 21 16 00      [10]  222 	lxi 	h,#22
   013B 39            [10]  223 	dad 	sp
   013C E5            [12]  224 	push	h
   013D CD 00 00      [18]  225 	call	ccgint
   0140 23            [ 6]  226 	inx 	h
   0141 D1            [10]  227 	pop 	d
   0142 CD 00 00      [18]  228 	call	ccpint
   0145 2B            [ 6]  229 	dcx 	h
   0146 CD 00 00      [18]  230 	call	ccgchar
   0149 D1            [10]  231 	pop 	d
   014A CD 00 00      [18]  232 	call	ccpint
   014D CD 00 00      [18]  233 	call	cclneg
   0150 7C            [ 4]  234 	mov 	a,h
   0151 B5            [ 4]  235 	ora 	l
   0152 CA 58 01      [10]  236 	jz  	$9
   0155 C3 FF 04      [10]  237 	jmp 	$3
                            238 ;        while (isspace(ch = _getc(fd)))
   0158                     239 $9:
   0158                     240 $10:
   0158 21 08 00      [10]  241 	lxi 	h,#8
   015B 39            [10]  242 	dad 	sp
   015C E5            [12]  243 	push	h
   015D 21 1E 00      [10]  244 	lxi 	h,#30
   0160 39            [10]  245 	dad 	sp
   0161 CD 00 00      [18]  246 	call	ccgint
   0164 E5            [12]  247 	push	h
   0165 3E 01         [ 7]  248 	mvi 	a,#1
   0167 CD 00 00      [18]  249 	call	_getc
   016A C1            [10]  250 	pop 	b
   016B D1            [10]  251 	pop 	d
   016C CD 00 00      [18]  252 	call	ccpint
   016F E5            [12]  253 	push	h
   0170 3E 01         [ 7]  254 	mvi 	a,#1
   0172 CD 00 00      [18]  255 	call	isspace
   0175 C1            [10]  256 	pop 	b
   0176 7C            [ 4]  257 	mov 	a,h
   0177 B5            [ 4]  258 	ora 	l
   0178 CA 7E 01      [10]  259 	jz  	$11
                            260 ;            ;
   017B C3 58 01      [10]  261 	jmp 	$10
   017E                     262 $11:
                            263 ;        if (ch == EOF) {
   017E 21 08 00      [10]  264 	lxi 	h,#8
   0181 39            [10]  265 	dad 	sp
   0182 CD 00 00      [18]  266 	call	ccgint
   0185 E5            [12]  267 	push	h
   0186 21 01 00      [10]  268 	lxi 	h,#1
   0189 CD 00 00      [18]  269 	call	ccneg
   018C D1            [10]  270 	pop 	d
   018D CD 00 00      [18]  271 	call	cceq
   0190 7C            [ 4]  272 	mov 	a,h
   0191 B5            [ 4]  273 	ora 	l
   0192 CA B0 01      [10]  274 	jz  	$12
                            275 ;            if (ac) break;
   0195 21 0C 00      [10]  276 	lxi 	h,#12
   0198 39            [10]  277 	dad 	sp
   0199 CD 00 00      [18]  278 	call	ccgint
   019C 7C            [ 4]  279 	mov 	a,h
   019D B5            [ 4]  280 	ora 	l
   019E CA A7 01      [10]  281 	jz  	$13
   01A1 C3 FF 04      [10]  282 	jmp 	$3
                            283 ;            else return EOF;
   01A4 C3 B0 01      [10]  284 	jmp 	$14
   01A7                     285 $13:
   01A7 21 01 00      [10]  286 	lxi 	h,#1
   01AA CD 00 00      [18]  287 	call	ccneg
   01AD C3 09 05      [10]  288 	jmp 	$1
   01B0                     289 $14:
                            290 ;        }
                            291 ;        _ungetc(ch);
   01B0                     292 $12:
   01B0 21 08 00      [10]  293 	lxi 	h,#8
   01B3 39            [10]  294 	dad 	sp
   01B4 CD 00 00      [18]  295 	call	ccgint
   01B7 E5            [12]  296 	push	h
   01B8 3E 01         [ 7]  297 	mvi 	a,#1
   01BA CD 00 00      [18]  298 	call	_ungetc
   01BD C1            [10]  299 	pop 	b
                            300 ;        switch (cnv) {
   01BE 21 14 00      [10]  301 	lxi 	h,$15
   01C1 E5            [12]  302 	push	h
   01C2 21 08 00      [10]  303 	lxi 	h,#8
   01C5 39            [10]  304 	dad 	sp
   01C6 CD 00 00      [18]  305 	call	ccgint
   01C9 C3 00 00      [10]  306 	jmp 	cccase
                            307 ;            case 'c':
   01CC                     308 $17:
                            309 ;                *carg = _getc(fd);
   01CC 21 16 00      [10]  310 	lxi 	h,#22
   01CF 39            [10]  311 	dad 	sp
   01D0 CD 00 00      [18]  312 	call	ccgint
   01D3 E5            [12]  313 	push	h
   01D4 21 1E 00      [10]  314 	lxi 	h,#30
   01D7 39            [10]  315 	dad 	sp
   01D8 CD 00 00      [18]  316 	call	ccgint
   01DB E5            [12]  317 	push	h
   01DC 3E 01         [ 7]  318 	mvi 	a,#1
   01DE CD 00 00      [18]  319 	call	_getc
   01E1 C1            [10]  320 	pop 	b
   01E2 D1            [10]  321 	pop 	d
   01E3 7D            [ 4]  322 	mov 	a,l
   01E4 12            [ 7]  323 	stax	d
                            324 ;                break;
   01E5 C3 EF 04      [10]  325 	jmp 	$16
                            326 ;            case 's':
   01E8                     327 $18:
                            328 ;                while (width--) {
   01E8                     329 $19:
   01E8 21 0A 00      [10]  330 	lxi 	h,#10
   01EB 39            [10]  331 	dad 	sp
   01EC E5            [12]  332 	push	h
   01ED CD 00 00      [18]  333 	call	ccgint
   01F0 2B            [ 6]  334 	dcx 	h
   01F1 D1            [10]  335 	pop 	d
   01F2 CD 00 00      [18]  336 	call	ccpint
   01F5 23            [ 6]  337 	inx 	h
   01F6 7C            [ 4]  338 	mov 	a,h
   01F7 B5            [ 4]  339 	ora 	l
   01F8 CA 65 02      [10]  340 	jz  	$20
                            341 ;                    if ((*carg = _getc(fd)) == EOF) break;
   01FB 21 16 00      [10]  342 	lxi 	h,#22
   01FE 39            [10]  343 	dad 	sp
   01FF CD 00 00      [18]  344 	call	ccgint
   0202 E5            [12]  345 	push	h
   0203 21 1E 00      [10]  346 	lxi 	h,#30
   0206 39            [10]  347 	dad 	sp
   0207 CD 00 00      [18]  348 	call	ccgint
   020A E5            [12]  349 	push	h
   020B 3E 01         [ 7]  350 	mvi 	a,#1
   020D CD 00 00      [18]  351 	call	_getc
   0210 C1            [10]  352 	pop 	b
   0211 D1            [10]  353 	pop 	d
   0212 7D            [ 4]  354 	mov 	a,l
   0213 12            [ 7]  355 	stax	d
   0214 E5            [12]  356 	push	h
   0215 21 01 00      [10]  357 	lxi 	h,#1
   0218 CD 00 00      [18]  358 	call	ccneg
   021B D1            [10]  359 	pop 	d
   021C CD 00 00      [18]  360 	call	cceq
   021F 7C            [ 4]  361 	mov 	a,h
   0220 B5            [ 4]  362 	ora 	l
   0221 CA 27 02      [10]  363 	jz  	$21
   0224 C3 65 02      [10]  364 	jmp 	$20
                            365 ;                    if (isspace(*carg)) break;
   0227                     366 $21:
   0227 21 16 00      [10]  367 	lxi 	h,#22
   022A 39            [10]  368 	dad 	sp
   022B CD 00 00      [18]  369 	call	ccgint
   022E CD 00 00      [18]  370 	call	ccgchar
   0231 E5            [12]  371 	push	h
   0232 3E 01         [ 7]  372 	mvi 	a,#1
   0234 CD 00 00      [18]  373 	call	isspace
   0237 C1            [10]  374 	pop 	b
   0238 7C            [ 4]  375 	mov 	a,h
   0239 B5            [ 4]  376 	ora 	l
   023A CA 40 02      [10]  377 	jz  	$22
   023D C3 65 02      [10]  378 	jmp 	$20
                            379 ;                    if (carg != &wast) ++carg;
   0240                     380 $22:
   0240 21 16 00      [10]  381 	lxi 	h,#22
   0243 39            [10]  382 	dad 	sp
   0244 CD 00 00      [18]  383 	call	ccgint
   0247 E5            [12]  384 	push	h
   0248 21 10 00      [10]  385 	lxi 	h,#16
   024B 39            [10]  386 	dad 	sp
   024C D1            [10]  387 	pop 	d
   024D CD 00 00      [18]  388 	call	ccne
   0250 7C            [ 4]  389 	mov 	a,h
   0251 B5            [ 4]  390 	ora 	l
   0252 CA 62 02      [10]  391 	jz  	$23
   0255 21 16 00      [10]  392 	lxi 	h,#22
   0258 39            [10]  393 	dad 	sp
   0259 E5            [12]  394 	push	h
   025A CD 00 00      [18]  395 	call	ccgint
   025D 23            [ 6]  396 	inx 	h
   025E D1            [10]  397 	pop 	d
   025F CD 00 00      [18]  398 	call	ccpint
                            399 ;                }
   0262                     400 $23:
   0262 C3 E8 01      [10]  401 	jmp 	$19
   0265                     402 $20:
                            403 ;                *carg = 0;
   0265 21 16 00      [10]  404 	lxi 	h,#22
   0268 39            [10]  405 	dad 	sp
   0269 CD 00 00      [18]  406 	call	ccgint
   026C E5            [12]  407 	push	h
   026D 21 00 00      [10]  408 	lxi 	h,#0
   0270 D1            [10]  409 	pop 	d
   0271 7D            [ 4]  410 	mov 	a,l
   0272 12            [ 7]  411 	stax	d
                            412 ;                break;
   0273 C3 EF 04      [10]  413 	jmp 	$16
                            414 ;            default:
   0276                     415 $24:
                            416 ;                switch (cnv) {
   0276 21 00 00      [10]  417 	lxi 	h,$25
   0279 E5            [12]  418 	push	h
   027A 21 08 00      [10]  419 	lxi 	h,#8
   027D 39            [10]  420 	dad 	sp
   027E CD 00 00      [18]  421 	call	ccgint
   0281 C3 00 00      [10]  422 	jmp 	cccase
                            423 ;                    case 'd': base = 10;
   0284                     424 $27:
   0284 21 04 00      [10]  425 	lxi 	h,#4
   0287 39            [10]  426 	dad 	sp
   0288 E5            [12]  427 	push	h
   0289 21 0A 00      [10]  428 	lxi 	h,#10
   028C D1            [10]  429 	pop 	d
   028D CD 00 00      [18]  430 	call	ccpint
                            431 ;                        sign = 0;
   0290 21 00 00      [10]  432 	lxi 	h,#0
   0293 39            [10]  433 	dad 	sp
   0294 E5            [12]  434 	push	h
   0295 21 00 00      [10]  435 	lxi 	h,#0
   0298 D1            [10]  436 	pop 	d
   0299 CD 00 00      [18]  437 	call	ccpint
                            438 ;                        ovfl = 3276;
   029C 21 02 00      [10]  439 	lxi 	h,#2
   029F 39            [10]  440 	dad 	sp
   02A0 E5            [12]  441 	push	h
   02A1 21 CC 0C      [10]  442 	lxi 	h,#3276
   02A4 D1            [10]  443 	pop 	d
   02A5 CD 00 00      [18]  444 	call	ccpint
                            445 ;                        break;
   02A8 C3 2D 03      [10]  446 	jmp 	$26
                            447 ;                    case 'o': base = 8;
   02AB                     448 $28:
   02AB 21 04 00      [10]  449 	lxi 	h,#4
   02AE 39            [10]  450 	dad 	sp
   02AF E5            [12]  451 	push	h
   02B0 21 08 00      [10]  452 	lxi 	h,#8
   02B3 D1            [10]  453 	pop 	d
   02B4 CD 00 00      [18]  454 	call	ccpint
                            455 ;                        sign = 1;
   02B7 21 00 00      [10]  456 	lxi 	h,#0
   02BA 39            [10]  457 	dad 	sp
   02BB E5            [12]  458 	push	h
   02BC 21 01 00      [10]  459 	lxi 	h,#1
   02BF D1            [10]  460 	pop 	d
   02C0 CD 00 00      [18]  461 	call	ccpint
                            462 ;                        ovfl = 8191;
   02C3 21 02 00      [10]  463 	lxi 	h,#2
   02C6 39            [10]  464 	dad 	sp
   02C7 E5            [12]  465 	push	h
   02C8 21 FF 1F      [10]  466 	lxi 	h,#8191
   02CB D1            [10]  467 	pop 	d
   02CC CD 00 00      [18]  468 	call	ccpint
                            469 ;                        break;
   02CF C3 2D 03      [10]  470 	jmp 	$26
                            471 ;                    case 'u': base = 10;
   02D2                     472 $29:
   02D2 21 04 00      [10]  473 	lxi 	h,#4
   02D5 39            [10]  474 	dad 	sp
   02D6 E5            [12]  475 	push	h
   02D7 21 0A 00      [10]  476 	lxi 	h,#10
   02DA D1            [10]  477 	pop 	d
   02DB CD 00 00      [18]  478 	call	ccpint
                            479 ;                        sign = 1;
   02DE 21 00 00      [10]  480 	lxi 	h,#0
   02E1 39            [10]  481 	dad 	sp
   02E2 E5            [12]  482 	push	h
   02E3 21 01 00      [10]  483 	lxi 	h,#1
   02E6 D1            [10]  484 	pop 	d
   02E7 CD 00 00      [18]  485 	call	ccpint
                            486 ;                        ovfl = 6553;
   02EA 21 02 00      [10]  487 	lxi 	h,#2
   02ED 39            [10]  488 	dad 	sp
   02EE E5            [12]  489 	push	h
   02EF 21 99 19      [10]  490 	lxi 	h,#6553
   02F2 D1            [10]  491 	pop 	d
   02F3 CD 00 00      [18]  492 	call	ccpint
                            493 ;                        break;
   02F6 C3 2D 03      [10]  494 	jmp 	$26
                            495 ;                    case 'x': base = 16;
   02F9                     496 $30:
   02F9 21 04 00      [10]  497 	lxi 	h,#4
   02FC 39            [10]  498 	dad 	sp
   02FD E5            [12]  499 	push	h
   02FE 21 10 00      [10]  500 	lxi 	h,#16
   0301 D1            [10]  501 	pop 	d
   0302 CD 00 00      [18]  502 	call	ccpint
                            503 ;                        sign = 1;
   0305 21 00 00      [10]  504 	lxi 	h,#0
   0308 39            [10]  505 	dad 	sp
   0309 E5            [12]  506 	push	h
   030A 21 01 00      [10]  507 	lxi 	h,#1
   030D D1            [10]  508 	pop 	d
   030E CD 00 00      [18]  509 	call	ccpint
                            510 ;                        ovfl = 4095;
   0311 21 02 00      [10]  511 	lxi 	h,#2
   0314 39            [10]  512 	dad 	sp
   0315 E5            [12]  513 	push	h
   0316 21 FF 0F      [10]  514 	lxi 	h,#4095
   0319 D1            [10]  515 	pop 	d
   031A CD 00 00      [18]  516 	call	ccpint
                            517 ;                        break;
   031D C3 2D 03      [10]  518 	jmp 	$26
                            519 ;                    default: return ac;
   0320                     520 $31:
   0320 21 0C 00      [10]  521 	lxi 	h,#12
   0323 39            [10]  522 	dad 	sp
   0324 CD 00 00      [18]  523 	call	ccgint
   0327 C3 09 05      [10]  524 	jmp 	$1
                            525 ;                }
   032A C3 2D 03      [10]  526 	jmp 	$26
                            527 		.area  SMALLC_GENERATED_DATA  (REL,CON,DSEG)
   0000                     528 $25:
   0000 64 00 84 02 6F 00   529 	.dw	#100,$27,#111,$28,#117,$29,#120,$30
        AB 02 75 00 D2 02
        78 00 F9 02
   0010 20 03 00 00         530 	.dw	$31,0
                            531 		.area  SMALLC_GENERATED  (REL,CON,CSEG)
   032D                     532 $26:
                            533 ;                *narg = unsigned = 0;
   032D 21 10 00      [10]  534 	lxi 	h,#16
   0330 39            [10]  535 	dad 	sp
   0331 CD 00 00      [18]  536 	call	ccgint
   0334 E5            [12]  537 	push	h
   0335 21 14 00      [10]  538 	lxi 	h,#20
   0338 39            [10]  539 	dad 	sp
   0339 E5            [12]  540 	push	h
   033A 21 00 00      [10]  541 	lxi 	h,#0
   033D D1            [10]  542 	pop 	d
   033E CD 00 00      [18]  543 	call	ccpint
   0341 D1            [10]  544 	pop 	d
   0342 CD 00 00      [18]  545 	call	ccpint
                            546 ;                while (width-- && !isspace(ch = _getc(fd)) && ch != EOF) {
   0345                     547 $32:
   0345 21 0A 00      [10]  548 	lxi 	h,#10
   0348 39            [10]  549 	dad 	sp
   0349 E5            [12]  550 	push	h
   034A CD 00 00      [18]  551 	call	ccgint
   034D 2B            [ 6]  552 	dcx 	h
   034E D1            [10]  553 	pop 	d
   034F CD 00 00      [18]  554 	call	ccpint
   0352 23            [ 6]  555 	inx 	h
   0353 7C            [ 4]  556 	mov 	a,h
   0354 B5            [ 4]  557 	ora 	l
   0355 CA 79 03      [10]  558 	jz  	$34
   0358 21 08 00      [10]  559 	lxi 	h,#8
   035B 39            [10]  560 	dad 	sp
   035C E5            [12]  561 	push	h
   035D 21 1E 00      [10]  562 	lxi 	h,#30
   0360 39            [10]  563 	dad 	sp
   0361 CD 00 00      [18]  564 	call	ccgint
   0364 E5            [12]  565 	push	h
   0365 3E 01         [ 7]  566 	mvi 	a,#1
   0367 CD 00 00      [18]  567 	call	_getc
   036A C1            [10]  568 	pop 	b
   036B D1            [10]  569 	pop 	d
   036C CD 00 00      [18]  570 	call	ccpint
   036F E5            [12]  571 	push	h
   0370 3E 01         [ 7]  572 	mvi 	a,#1
   0372 CD 00 00      [18]  573 	call	isspace
   0375 C1            [10]  574 	pop 	b
   0376 CD 00 00      [18]  575 	call	cclneg
   0379                     576 $34:
   0379 CD 00 00      [18]  577 	call	ccbool
   037C 7C            [ 4]  578 	mov 	a,h
   037D B5            [ 4]  579 	ora 	l
   037E CA 93 03      [10]  580 	jz  	$35
   0381 21 08 00      [10]  581 	lxi 	h,#8
   0384 39            [10]  582 	dad 	sp
   0385 CD 00 00      [18]  583 	call	ccgint
   0388 E5            [12]  584 	push	h
   0389 21 01 00      [10]  585 	lxi 	h,#1
   038C CD 00 00      [18]  586 	call	ccneg
   038F D1            [10]  587 	pop 	d
   0390 CD 00 00      [18]  588 	call	ccne
   0393                     589 $35:
   0393 CD 00 00      [18]  590 	call	ccbool
   0396 7C            [ 4]  591 	mov 	a,h
   0397 B5            [ 4]  592 	ora 	l
   0398 CA CD 04      [10]  593 	jz  	$33
                            594 ;                    if (!sign)
   039B 21 00 00      [10]  595 	lxi 	h,#0
   039E 39            [10]  596 	dad 	sp
   039F CD 00 00      [18]  597 	call	ccgint
   03A2 CD 00 00      [18]  598 	call	cclneg
   03A5 7C            [ 4]  599 	mov 	a,h
   03A6 B5            [ 4]  600 	ora 	l
   03A7 CA DF 03      [10]  601 	jz  	$36
                            602 ;                        if (ch == '-') {
   03AA 21 08 00      [10]  603 	lxi 	h,#8
   03AD 39            [10]  604 	dad 	sp
   03AE CD 00 00      [18]  605 	call	ccgint
   03B1 E5            [12]  606 	push	h
   03B2 21 2D 00      [10]  607 	lxi 	h,#45
   03B5 D1            [10]  608 	pop 	d
   03B6 CD 00 00      [18]  609 	call	cceq
   03B9 7C            [ 4]  610 	mov 	a,h
   03BA B5            [ 4]  611 	ora 	l
   03BB CA D3 03      [10]  612 	jz  	$37
                            613 ;                            sign = -1;
   03BE 21 00 00      [10]  614 	lxi 	h,#0
   03C1 39            [10]  615 	dad 	sp
   03C2 E5            [12]  616 	push	h
   03C3 21 01 00      [10]  617 	lxi 	h,#1
   03C6 CD 00 00      [18]  618 	call	ccneg
   03C9 D1            [10]  619 	pop 	d
   03CA CD 00 00      [18]  620 	call	ccpint
                            621 ;                            continue;
   03CD C3 45 03      [10]  622 	jmp 	$32
                            623 ;                        } else sign = 1;
   03D0 C3 DF 03      [10]  624 	jmp 	$38
   03D3                     625 $37:
   03D3 21 00 00      [10]  626 	lxi 	h,#0
   03D6 39            [10]  627 	dad 	sp
   03D7 E5            [12]  628 	push	h
   03D8 21 01 00      [10]  629 	lxi 	h,#1
   03DB D1            [10]  630 	pop 	d
   03DC CD 00 00      [18]  631 	call	ccpint
   03DF                     632 $38:
                            633 ;                    if (ch < '0') return ac;
   03DF                     634 $36:
   03DF 21 08 00      [10]  635 	lxi 	h,#8
   03E2 39            [10]  636 	dad 	sp
   03E3 CD 00 00      [18]  637 	call	ccgint
   03E6 E5            [12]  638 	push	h
   03E7 21 30 00      [10]  639 	lxi 	h,#48
   03EA D1            [10]  640 	pop 	d
   03EB CD 00 00      [18]  641 	call	cclt
   03EE 7C            [ 4]  642 	mov 	a,h
   03EF B5            [ 4]  643 	ora 	l
   03F0 CA FD 03      [10]  644 	jz  	$39
   03F3 21 0C 00      [10]  645 	lxi 	h,#12
   03F6 39            [10]  646 	dad 	sp
   03F7 CD 00 00      [18]  647 	call	ccgint
   03FA C3 09 05      [10]  648 	jmp 	$1
                            649 ;                    if (ch >= 'a') ch -= 87;
   03FD                     650 $39:
   03FD 21 08 00      [10]  651 	lxi 	h,#8
   0400 39            [10]  652 	dad 	sp
   0401 CD 00 00      [18]  653 	call	ccgint
   0404 E5            [12]  654 	push	h
   0405 21 61 00      [10]  655 	lxi 	h,#97
   0408 D1            [10]  656 	pop 	d
   0409 CD 00 00      [18]  657 	call	ccge
   040C 7C            [ 4]  658 	mov 	a,h
   040D B5            [ 4]  659 	ora 	l
   040E CA 28 04      [10]  660 	jz  	$40
   0411 21 08 00      [10]  661 	lxi 	h,#8
   0414 39            [10]  662 	dad 	sp
   0415 E5            [12]  663 	push	h
   0416 CD 00 00      [18]  664 	call	ccgint
   0419 E5            [12]  665 	push	h
   041A 21 57 00      [10]  666 	lxi 	h,#87
   041D D1            [10]  667 	pop 	d
   041E CD 00 00      [18]  668 	call	ccsub
   0421 D1            [10]  669 	pop 	d
   0422 CD 00 00      [18]  670 	call	ccpint
                            671 ;                    else if (ch >= 'A') ch -= 55;
   0425 C3 67 04      [10]  672 	jmp 	$41
   0428                     673 $40:
   0428 21 08 00      [10]  674 	lxi 	h,#8
   042B 39            [10]  675 	dad 	sp
   042C CD 00 00      [18]  676 	call	ccgint
   042F E5            [12]  677 	push	h
   0430 21 41 00      [10]  678 	lxi 	h,#65
   0433 D1            [10]  679 	pop 	d
   0434 CD 00 00      [18]  680 	call	ccge
   0437 7C            [ 4]  681 	mov 	a,h
   0438 B5            [ 4]  682 	ora 	l
   0439 CA 53 04      [10]  683 	jz  	$42
   043C 21 08 00      [10]  684 	lxi 	h,#8
   043F 39            [10]  685 	dad 	sp
   0440 E5            [12]  686 	push	h
   0441 CD 00 00      [18]  687 	call	ccgint
   0444 E5            [12]  688 	push	h
   0445 21 37 00      [10]  689 	lxi 	h,#55
   0448 D1            [10]  690 	pop 	d
   0449 CD 00 00      [18]  691 	call	ccsub
   044C D1            [10]  692 	pop 	d
   044D CD 00 00      [18]  693 	call	ccpint
                            694 ;                    else ch -= '0';
   0450 C3 67 04      [10]  695 	jmp 	$43
   0453                     696 $42:
   0453 21 08 00      [10]  697 	lxi 	h,#8
   0456 39            [10]  698 	dad 	sp
   0457 E5            [12]  699 	push	h
   0458 CD 00 00      [18]  700 	call	ccgint
   045B E5            [12]  701 	push	h
   045C 21 30 00      [10]  702 	lxi 	h,#48
   045F D1            [10]  703 	pop 	d
   0460 CD 00 00      [18]  704 	call	ccsub
   0463 D1            [10]  705 	pop 	d
   0464 CD 00 00      [18]  706 	call	ccpint
   0467                     707 $43:
   0467                     708 $41:
                            709 ;                    if (ch >= base || unsigned > ovfl) return ac;
   0467 21 08 00      [10]  710 	lxi 	h,#8
   046A 39            [10]  711 	dad 	sp
   046B CD 00 00      [18]  712 	call	ccgint
   046E E5            [12]  713 	push	h
   046F 21 06 00      [10]  714 	lxi 	h,#6
   0472 39            [10]  715 	dad 	sp
   0473 CD 00 00      [18]  716 	call	ccgint
   0476 D1            [10]  717 	pop 	d
   0477 CD 00 00      [18]  718 	call	ccge
   047A 7C            [ 4]  719 	mov 	a,h
   047B B5            [ 4]  720 	ora 	l
   047C C2 92 04      [10]  721 	jnz 	$45
   047F 21 12 00      [10]  722 	lxi 	h,#18
   0482 39            [10]  723 	dad 	sp
   0483 CD 00 00      [18]  724 	call	ccgint
   0486 E5            [12]  725 	push	h
   0487 21 04 00      [10]  726 	lxi 	h,#4
   048A 39            [10]  727 	dad 	sp
   048B CD 00 00      [18]  728 	call	ccgint
   048E D1            [10]  729 	pop 	d
   048F CD 00 00      [18]  730 	call	ccugt
   0492                     731 $45:
   0492 CD 00 00      [18]  732 	call	ccbool
   0495 7C            [ 4]  733 	mov 	a,h
   0496 B5            [ 4]  734 	ora 	l
   0497 CA A4 04      [10]  735 	jz  	$44
   049A 21 0C 00      [10]  736 	lxi 	h,#12
   049D 39            [10]  737 	dad 	sp
   049E CD 00 00      [18]  738 	call	ccgint
   04A1 C3 09 05      [10]  739 	jmp 	$1
                            740 ;                    unsigned = unsigned * base + ch;
   04A4                     741 $44:
   04A4 21 12 00      [10]  742 	lxi 	h,#18
   04A7 39            [10]  743 	dad 	sp
   04A8 E5            [12]  744 	push	h
   04A9 21 14 00      [10]  745 	lxi 	h,#20
   04AC 39            [10]  746 	dad 	sp
   04AD CD 00 00      [18]  747 	call	ccgint
   04B0 E5            [12]  748 	push	h
   04B1 21 08 00      [10]  749 	lxi 	h,#8
   04B4 39            [10]  750 	dad 	sp
   04B5 CD 00 00      [18]  751 	call	ccgint
   04B8 D1            [10]  752 	pop 	d
   04B9 CD 00 00      [18]  753 	call	ccmul
   04BC E5            [12]  754 	push	h
   04BD 21 0C 00      [10]  755 	lxi 	h,#12
   04C0 39            [10]  756 	dad 	sp
   04C1 CD 00 00      [18]  757 	call	ccgint
   04C4 D1            [10]  758 	pop 	d
   04C5 19            [10]  759 	dad 	d
   04C6 D1            [10]  760 	pop 	d
   04C7 CD 00 00      [18]  761 	call	ccpint
                            762 ;                }
   04CA C3 45 03      [10]  763 	jmp 	$32
   04CD                     764 $33:
                            765 ;                *narg = sign * unsigned;
   04CD 21 10 00      [10]  766 	lxi 	h,#16
   04D0 39            [10]  767 	dad 	sp
   04D1 CD 00 00      [18]  768 	call	ccgint
   04D4 E5            [12]  769 	push	h
   04D5 21 02 00      [10]  770 	lxi 	h,#2
   04D8 39            [10]  771 	dad 	sp
   04D9 CD 00 00      [18]  772 	call	ccgint
   04DC E5            [12]  773 	push	h
   04DD 21 16 00      [10]  774 	lxi 	h,#22
   04E0 39            [10]  775 	dad 	sp
   04E1 CD 00 00      [18]  776 	call	ccgint
   04E4 D1            [10]  777 	pop 	d
   04E5 CD 00 00      [18]  778 	call	ccmul
   04E8 D1            [10]  779 	pop 	d
   04E9 CD 00 00      [18]  780 	call	ccpint
                            781 ;        }
   04EC C3 EF 04      [10]  782 	jmp 	$16
                            783 		.area  SMALLC_GENERATED_DATA  (REL,CON,DSEG)
   0014                     784 $15:
   0014 63 00 CC 01 73 00   785 	.dw	#99,$17,#115,$18
        E8 01
   001C 76 02 00 00         786 	.dw	$24,0
                            787 		.area  SMALLC_GENERATED  (REL,CON,CSEG)
   04EF                     788 $16:
                            789 ;        ++ac;
   04EF 21 0C 00      [10]  790 	lxi 	h,#12
   04F2 39            [10]  791 	dad 	sp
   04F3 E5            [12]  792 	push	h
   04F4 CD 00 00      [18]  793 	call	ccgint
   04F7 23            [ 6]  794 	inx 	h
   04F8 D1            [10]  795 	pop 	d
   04F9 CD 00 00      [18]  796 	call	ccpint
                            797 ;    }
   04FC C3 3D 00      [10]  798 	jmp 	$2
   04FF                     799 $3:
                            800 ;    return ac;
   04FF 21 0C 00      [10]  801 	lxi 	h,#12
   0502 39            [10]  802 	dad 	sp
   0503 CD 00 00      [18]  803 	call	ccgint
   0506 C3 09 05      [10]  804 	jmp 	$1
                            805 ;}
   0509                     806 $1:
   0509 EB            [ 4]  807 	xchg
   050A 21 18 00      [10]  808 	lxi 	h,#24
   050D 39            [10]  809 	dad 	sp
   050E F9            [ 6]  810 	sphl
   050F EB            [ 4]  811 	xchg
   0510 C9            [10]  812 	ret
                            813 		.area  SMALLC_GENERATED_DATA  (REL,CON,DSEG)
                            814 	;extrn	_Oldch
                            815 	.globl	_scanf
                            816 	;extrn	isspace
                            817 	;extrn	utoi
                            818 	;extrn	_getc
                            819 	;extrn	_ungetc
                            820 
                            821 ;0 error(s) in compilation
                            822 ;	literal pool:0
                            823 ;	global pool:6
                            824 ;	Macro pool:112
                            825 	;	.end
