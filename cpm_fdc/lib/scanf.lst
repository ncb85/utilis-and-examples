                              1 ; Small C 8080
                              2 ;	Coder (2.4,84/11/27)
                              3 ;	Front End (2.7,84/11/28)
                              4 ;	Front End for ASXXXX (2.8,13/01/20)
                              5 		;program area SMALLC_GENERATED is RELOCATABLE
                              6 		.module SMALLC_GENERATED
                              7 		.list   (err, loc, bin, eqt, cyc, lin, src, lst, md)
                              8 		.nlist  (pag)
                              9 		.area  SMALLC_GENERATED  (REL,CON,CSEG)
                             10 ;/*
                             11 ; * Main interface to scanf-type routines, independent of integer/float
                             12 ; *
                             13 ; * scanf(controlstring, arg, arg, ...)  or 
                             14 ; * sscanf(string, controlstring, arg, arg, ...) or
                             15 ; * fscanf(file, controlstring, arg, arg, ...) --  formatted read
                             16 ; *        operates as described by Kernighan & Ritchie
                             17 ; */
                             18 ;#include <stdio.h>
                             19 ;#define stdin 0
                             20 ;#define stdout 1
                             21 ;#define stderr 2
                             22 ;#define NULL 0
                             23 ;#define EOF (-1)
                             24 ;#define FILE char
                             25 ;//#include <ctype.h>
                             26 ;#define ERR (-1)
                             27 ;extern int ccargc;
                             28 ;char *_String1;
                             29 ;int _Oldch;
                             30 ;scanf(args)
   0000                      31 scanf:
                             32 ;int args;
                             33 ;{
                             34 ;    #asm
   0000 32 00 00      [13]   35         sta ccargc
   0003 AF            [ 4]   36         xra a
   0004 32 01 00      [13]   37         sta ccargc + 1
                             38 ;    _String1 = NULL;
   0007 21 00 00      [10]   39 	lxi 	h,#0
   000A 22 00 00      [16]   40 	shld	_String1
                             41 ;    return ( _scanf(stdin, ccargc + &args - 1));
   000D 21 00 00      [10]   42 	lxi 	h,#0
   0010 E5            [12]   43 	push	h
   0011 2A 00 00      [16]   44 	lhld	ccargc
   0014 E5            [12]   45 	push	h
   0015 21 06 00      [10]   46 	lxi 	h,#6
   0018 39            [10]   47 	dad 	sp
   0019 D1            [10]   48 	pop 	d
   001A EB            [ 4]   49 	xchg
   001B 29            [10]   50 	dad 	h
   001C EB            [ 4]   51 	xchg
   001D 19            [10]   52 	dad 	d
   001E E5            [12]   53 	push	h
   001F 21 01 00      [10]   54 	lxi 	h,#1
   0022 29            [10]   55 	dad 	h
   0023 D1            [10]   56 	pop 	d
   0024 CD 00 00      [18]   57 	call	ccsub
   0027 E5            [12]   58 	push	h
   0028 3E 02         [ 7]   59 	mvi 	a,#2
   002A CD 00 00      [18]   60 	call	_scanf
   002D C1            [10]   61 	pop 	b
   002E C1            [10]   62 	pop 	b
   002F C3 32 00      [10]   63 	jmp 	$1
                             64 ;}
   0032                      65 $1:
   0032 C9            [10]   66 	ret
                             67 ;fscanf(args)
   0033                      68 fscanf:
                             69 ;int args;
                             70 ;{
                             71 ;    int *nxtarg;
   0033 C5            [12]   72 	push	b
                             73 ;    #asm
   0034 32 00 00      [13]   74         sta ccargc
   0037 AF            [ 4]   75         xra a
   0038 32 01 00      [13]   76         sta ccargc + 1
                             77 ;    _String1 = NULL;
   003B 21 00 00      [10]   78 	lxi 	h,#0
   003E 22 00 00      [16]   79 	shld	_String1
                             80 ;    nxtarg = ccargc + &args;
   0041 21 00 00      [10]   81 	lxi 	h,#0
   0044 39            [10]   82 	dad 	sp
   0045 E5            [12]   83 	push	h
   0046 2A 00 00      [16]   84 	lhld	ccargc
   0049 E5            [12]   85 	push	h
   004A 21 08 00      [10]   86 	lxi 	h,#8
   004D 39            [10]   87 	dad 	sp
   004E D1            [10]   88 	pop 	d
   004F EB            [ 4]   89 	xchg
   0050 29            [10]   90 	dad 	h
   0051 EB            [ 4]   91 	xchg
   0052 19            [10]   92 	dad 	d
   0053 D1            [10]   93 	pop 	d
   0054 CD 00 00      [18]   94 	call	ccpint
                             95 ;    return ( _scanf(*(--nxtarg), --nxtarg));
   0057 21 00 00      [10]   96 	lxi 	h,#0
   005A 39            [10]   97 	dad 	sp
   005B E5            [12]   98 	push	h
   005C CD 00 00      [18]   99 	call	ccgint
   005F 2B            [ 6]  100 	dcx 	h
   0060 2B            [ 6]  101 	dcx 	h
   0061 D1            [10]  102 	pop 	d
   0062 CD 00 00      [18]  103 	call	ccpint
   0065 CD 00 00      [18]  104 	call	ccgint
   0068 E5            [12]  105 	push	h
   0069 21 02 00      [10]  106 	lxi 	h,#2
   006C 39            [10]  107 	dad 	sp
   006D E5            [12]  108 	push	h
   006E CD 00 00      [18]  109 	call	ccgint
   0071 2B            [ 6]  110 	dcx 	h
   0072 2B            [ 6]  111 	dcx 	h
   0073 D1            [10]  112 	pop 	d
   0074 CD 00 00      [18]  113 	call	ccpint
   0077 E5            [12]  114 	push	h
   0078 3E 02         [ 7]  115 	mvi 	a,#2
   007A CD 00 00      [18]  116 	call	_scanf
   007D C1            [10]  117 	pop 	b
   007E C1            [10]  118 	pop 	b
   007F C3 82 00      [10]  119 	jmp 	$2
                            120 ;}
   0082                     121 $2:
   0082 C1            [10]  122 	pop 	b
   0083 C9            [10]  123 	ret
                            124 ;sscanf(args)
   0084                     125 sscanf:
                            126 ;int args;
                            127 ;{
                            128 ;    int *nxtarg;
   0084 C5            [12]  129 	push	b
                            130 ;    #asm
   0085 32 00 00      [13]  131         sta ccargc
   0088 AF            [ 4]  132         xra a
   0089 32 01 00      [13]  133         sta ccargc + 1
                            134 ;    nxtarg = ccargc + &args - 1;
   008C 21 00 00      [10]  135 	lxi 	h,#0
   008F 39            [10]  136 	dad 	sp
   0090 E5            [12]  137 	push	h
   0091 2A 00 00      [16]  138 	lhld	ccargc
   0094 E5            [12]  139 	push	h
   0095 21 08 00      [10]  140 	lxi 	h,#8
   0098 39            [10]  141 	dad 	sp
   0099 D1            [10]  142 	pop 	d
   009A EB            [ 4]  143 	xchg
   009B 29            [10]  144 	dad 	h
   009C EB            [ 4]  145 	xchg
   009D 19            [10]  146 	dad 	d
   009E E5            [12]  147 	push	h
   009F 21 01 00      [10]  148 	lxi 	h,#1
   00A2 29            [10]  149 	dad 	h
   00A3 D1            [10]  150 	pop 	d
   00A4 CD 00 00      [18]  151 	call	ccsub
   00A7 D1            [10]  152 	pop 	d
   00A8 CD 00 00      [18]  153 	call	ccpint
                            154 ;    _String1 = *nxtarg;
   00AB 21 00 00      [10]  155 	lxi 	h,#0
   00AE 39            [10]  156 	dad 	sp
   00AF CD 00 00      [18]  157 	call	ccgint
   00B2 CD 00 00      [18]  158 	call	ccgint
   00B5 22 00 00      [16]  159 	shld	_String1
                            160 ;    return ( _scanf(stdout, --nxtarg));
   00B8 21 01 00      [10]  161 	lxi 	h,#1
   00BB E5            [12]  162 	push	h
   00BC 21 02 00      [10]  163 	lxi 	h,#2
   00BF 39            [10]  164 	dad 	sp
   00C0 E5            [12]  165 	push	h
   00C1 CD 00 00      [18]  166 	call	ccgint
   00C4 2B            [ 6]  167 	dcx 	h
   00C5 2B            [ 6]  168 	dcx 	h
   00C6 D1            [10]  169 	pop 	d
   00C7 CD 00 00      [18]  170 	call	ccpint
   00CA E5            [12]  171 	push	h
   00CB 3E 02         [ 7]  172 	mvi 	a,#2
   00CD CD 00 00      [18]  173 	call	_scanf
   00D0 C1            [10]  174 	pop 	b
   00D1 C1            [10]  175 	pop 	b
   00D2 C3 D5 00      [10]  176 	jmp 	$3
                            177 ;}
   00D5                     178 $3:
   00D5 C1            [10]  179 	pop 	b
   00D6 C9            [10]  180 	ret
                            181 ;/*
                            182 ; * _getc - fetch a single character from file
                            183 ; *         if _String1 is not null fetch from a string instead
                            184 ; */
                            185 ;_getc(fd)
   00D7                     186 _getc:
                            187 ;int fd;
                            188 ;{
                            189 ;    int c;
   00D7 C5            [12]  190 	push	b
                            191 ;    if (_Oldch != EOF) {
   00D8 2A 02 00      [16]  192 	lhld	_Oldch
   00DB E5            [12]  193 	push	h
   00DC 21 01 00      [10]  194 	lxi 	h,#1
   00DF CD 00 00      [18]  195 	call	ccneg
   00E2 D1            [10]  196 	pop 	d
   00E3 CD 00 00      [18]  197 	call	ccne
   00E6 7C            [ 4]  198 	mov 	a,h
   00E7 B5            [ 4]  199 	ora 	l
   00E8 CA 0D 01      [10]  200 	jz  	$5
                            201 ;        c = _Oldch;
   00EB 21 00 00      [10]  202 	lxi 	h,#0
   00EE 39            [10]  203 	dad 	sp
   00EF E5            [12]  204 	push	h
   00F0 2A 02 00      [16]  205 	lhld	_Oldch
   00F3 D1            [10]  206 	pop 	d
   00F4 CD 00 00      [18]  207 	call	ccpint
                            208 ;        _Oldch = EOF;
   00F7 21 01 00      [10]  209 	lxi 	h,#1
   00FA CD 00 00      [18]  210 	call	ccneg
   00FD 22 02 00      [16]  211 	shld	_Oldch
                            212 ;        return c;
   0100 21 00 00      [10]  213 	lxi 	h,#0
   0103 39            [10]  214 	dad 	sp
   0104 CD 00 00      [18]  215 	call	ccgint
   0107 C3 67 01      [10]  216 	jmp 	$4
                            217 ;    } else {
   010A C3 67 01      [10]  218 	jmp 	$6
   010D                     219 $5:
                            220 ;        if (_String1 != NULL) {
   010D 2A 00 00      [16]  221 	lhld	_String1
   0110 E5            [12]  222 	push	h
   0111 21 00 00      [10]  223 	lxi 	h,#0
   0114 D1            [10]  224 	pop 	d
   0115 CD 00 00      [18]  225 	call	ccne
   0118 7C            [ 4]  226 	mov 	a,h
   0119 B5            [ 4]  227 	ora 	l
   011A CA 56 01      [10]  228 	jz  	$7
                            229 ;            if ((c = *_String1++)) return c;
   011D 21 00 00      [10]  230 	lxi 	h,#0
   0120 39            [10]  231 	dad 	sp
   0121 E5            [12]  232 	push	h
   0122 2A 00 00      [16]  233 	lhld	_String1
   0125 23            [ 6]  234 	inx 	h
   0126 22 00 00      [16]  235 	shld	_String1
   0129 2B            [ 6]  236 	dcx 	h
   012A CD 00 00      [18]  237 	call	ccgchar
   012D D1            [10]  238 	pop 	d
   012E CD 00 00      [18]  239 	call	ccpint
   0131 7C            [ 4]  240 	mov 	a,h
   0132 B5            [ 4]  241 	ora 	l
   0133 CA 43 01      [10]  242 	jz  	$8
   0136 21 00 00      [10]  243 	lxi 	h,#0
   0139 39            [10]  244 	dad 	sp
   013A CD 00 00      [18]  245 	call	ccgint
   013D C3 67 01      [10]  246 	jmp 	$4
                            247 ;            else {
   0140 C3 53 01      [10]  248 	jmp 	$9
   0143                     249 $8:
                            250 ;                --_String1;
   0143 2A 00 00      [16]  251 	lhld	_String1
   0146 2B            [ 6]  252 	dcx 	h
   0147 22 00 00      [16]  253 	shld	_String1
                            254 ;                return EOF;
   014A 21 01 00      [10]  255 	lxi 	h,#1
   014D CD 00 00      [18]  256 	call	ccneg
   0150 C3 67 01      [10]  257 	jmp 	$4
                            258 ;            }
   0153                     259 $9:
                            260 ;        } else {
   0153 C3 67 01      [10]  261 	jmp 	$10
   0156                     262 $7:
                            263 ;            return fgetc(fd);
   0156 21 04 00      [10]  264 	lxi 	h,#4
   0159 39            [10]  265 	dad 	sp
   015A CD 00 00      [18]  266 	call	ccgint
   015D E5            [12]  267 	push	h
   015E 3E 01         [ 7]  268 	mvi 	a,#1
   0160 CD 00 00      [18]  269 	call	fgetc
   0163 C1            [10]  270 	pop 	b
   0164 C3 67 01      [10]  271 	jmp 	$4
                            272 ;        }
   0167                     273 $10:
                            274 ;    }
   0167                     275 $6:
                            276 ;}
   0167                     277 $4:
   0167 C1            [10]  278 	pop 	b
   0168 C9            [10]  279 	ret
                            280 ;/*
                            281 ; * unget character assume only one source of characters
                            282 ; * i.e. does not require file descriptor
                            283 ; */
                            284 ;_ungetc(ch)
   0169                     285 _ungetc:
                            286 ;int ch;
                            287 ;{
                            288 ;    _Oldch = ch;
   0169 21 02 00      [10]  289 	lxi 	h,#2
   016C 39            [10]  290 	dad 	sp
   016D CD 00 00      [18]  291 	call	ccgint
   0170 22 02 00      [16]  292 	shld	_Oldch
                            293 ;}
   0173                     294 $11:
   0173 C9            [10]  295 	ret
                            296 		.area  SMALLC_GENERATED_DATA  (REL,CON,DSEG)
                            297 	;extrn	ccargc
                            298 	.globl	_String1
   0000                     299 _String1:
   0000 00 00               300 	.dw	#0
                            301 	.globl	_Oldch
   0002                     302 _Oldch:
   0002 00 00               303 	.dw	#0
                            304 	.globl	scanf
                            305 	;extrn	_scanf
                            306 	.globl	fscanf
                            307 	.globl	sscanf
                            308 	.globl	_getc
                            309 	;extrn	fgetc
                            310 	.globl	_ungetc
                            311 
                            312 ;0 error(s) in compilation
                            313 ;	literal pool:0
                            314 ;	global pool:10
                            315 ;	Macro pool:112
                            316 	;	.end
