                              1 ; Small C 8080
                              2 ;	Coder (2.4,84/11/27)
                              3 ;	Front End (2.7,84/11/28)
                              4 ;	Front End for ASXXXX (2.8,13/01/20)
                              5 		;program area SMALLC_GENERATED is RELOCATABLE
                              6 		.module SMALLC_GENERATED
                              7 		.list   (err, loc, bin, eqt, cyc, lin, src, lst, md)
                              8 		.nlist  (pag)
                              9 		.area  SMALLC_GENERATED  (REL,CON,CSEG)
                             10 ;/**
                             11 ;        PRINTF Library Documentation
                             12 ; 
                             13 ;PRINTF supplies formatted output like that described by
                             14 ;Kernighan and Ritchie.  The input conversion routine utoi (for
                             15 ;unsigned integers) is also supplied.   
                             16 ; 
                             17 ;FUNCTIONS
                             18 ; 
                             19 ;printf(controlstring, arg, arg, ...) -- formatted print 
                             20 ;    "controlstring" is a string which can contain any of
                             21 ;    the following format codes: 
                             22 ;        %d	decimal integer 
                             23 ;        %u	unsigned decimal integer 
                             24 ;        %x	hexidecimal integer 
                             25 ;        %c	ASCII character 
                             26 ;        %s	null-terminated ASCII string 
                             27 ;        %f	fixed point conversion for double
                             28 ;        %e	floating point conversion for double 
                             29 ;    For each format code, there is an "arg" - a pointer to
                             30 ;    an object of that type. Between the '%' and the format
                             31 ;    code letter field specification may appear. For formats
                             32 ;    'f' and 'e', the specification consists of two integers
                             33 ;    separated by a period. The first specifies the minimum
                             34 ;    field width, and the second the number of digits to be
                             35 ;    printed after the decimal point. For all other formats,
                             36 ;    the specification consists only of the one integer
                             37 ;    giving the minimum field width. If there is no field 
                             38 ;    specification, the item is printed in no more space 
                             39 ;    than is necessary. 
                             40 ;        Example			  Output 
                             41 ;    printf(" decimal: %d ",15+2)	  decimal: 17  
                             42 ;    printf(" unsigned: %u ",-1)	  unsigned: 65535  
                             43 ;    printf(" hexidecimal: %x ",-1)	  hexidecimal: FFFF  
                             44 ;    printf(" string: %s ","hello")	  string: hello  
                             45 ;    printf(" character: %c ",65)	  character: A  
                             46 ;    printf(" fixed: %f ",1./7.)	  fixed: .142857  
                             47 ;    printf(" exponent: %8.5e ",1./7.) exponent: 1.42857e-1
                             48 ;    printf returns the number of characters output.
                             49 ; 
                             50 ;fprintf(unit, controlstring, arg, arg, ..)
                             51 ;    Provides functions similar to printf, but with output
                             52 ;    going to the file associated with 'unit'.
                             53 ;    fprintf returns the number of characters output.
                             54 ;sprintf(string, controlstring, arg, arg, ..)
                             55 ;    Provides functions similar to printf, but with output
                             56 ;    going to the character pointer 'string'.
                             57 ;    sprintf returns the number of characters output.
                             58 ;itod(n, str, sz)  int n;  char str[];  int sz;  
                             59 ;    convert n to signed decimal string of width sz, 
                             60 ;    right adjusted, blank filled; returns str 
                             61 ;    if sz > 0 terminate with null byte 
                             62 ;    if sz = 0 find end of string 
                             63 ;    if sz < 0 use last byte for data 
                             64 ;  
                             65 ;itou(nbr, str, sz)  int nbr;  char str[];  int sz;  
                             66 ;    convert nbr to unsigned decimal string of width sz, 
                             67 ;    right adjusted, blank filled; returns str 
                             68 ;    if sz > 0 terminate with null byte 
                             69 ;    if sz = 0 find end of string 
                             70 ;    if sz < 0 use last byte for data 
                             71 ;  
                             72 ;itox(n, str, sz)  int n;  char str[];  int sz;  
                             73 ;    converts n to hex string of length sz, right adjusted 
                             74 ;    and blank filled, returns str 
                             75 ;    if sz > 0 terminate with null byte 
                             76 ;    if sz = 0 find end of string 
                             77 ;    if sz < 0 use last byte for data 
                             78 ;  
                             79 ;ftoa(x,f,str) double x; int f; char *str; 
                             80 ;    converts x to fixed point string with f digits after 
                             81 ;    the decimal point, return str 
                             82 ;  
                             83 ;ftoe(x,f,str) double x; int f; char *str; 
                             84 ;    converts x to floating point string with f digits after
                             85 ;    the decimal point, return str 
                             86 ; 
                             87 ;utoi(decstr, nbr)  char *decstr;  int *nbr;  
                             88 ;    converts unsigned decimal ASCII string to integer 
                             89 ;    number. Returns field size, else ERR on error. (This is
                             90 ;    used to interpret the specification fields.) 
                             91 ; 
                             92 ; 
                             93 ;AUTHOR
                             94 ;    J. E. Hendrix for the original routines. J. R.
                             95 ;    Van Zandt for ftoa, ftoe, and the floating point
                             96 ;    modifications in printf.
                             97 ; 
                             98 ; 
                             99 ;INTERNAL DOCUMENTATION 
                            100 ; 
                            101 ;    The method used in ftoa to convert to a decimal string
                            102 ;involves more divisions than the classical method, but does not
                            103 ;require that the original number be scaled down at the
                            104 ;beginning. It was found that this initial scaling was causing
                            105 ;loss of precision. The present algorithm should always convert
                            106 ;an integer exactly if it can be represented exactly as a
                            107 ;floating point number (that is, if it is less than 2**40).
                            108 ;The routines seen by the user (printf, fprintf, sprintf) are in
                            109 ;the library PRINTF.  The routine which does all the hard work,
                            110 ;_printf, is in either PRINTF1 or PRINTF2 depending on whether or
                            111 ;not floating point output is required.
                            112 ; */
                            113 ;#include <stdio.h>
                            114 ;#define stdin 0
                            115 ;#define stdout 1
                            116 ;#define stderr 2
                            117 ;#define NULL 0
                            118 ;#define EOF (-1)
                            119 ;#define FILE char
                            120 ;int ccargc;
                            121 ;char *buffer, *_string;
                            122 ;/**
                            123 ; * fprintf(fd, ctlstring, arg, arg, ...) - Formatted print.
                            124 ; * Operates as described by Kernighan & Ritchie.
                            125 ; * b, c, d, o, s, u, and x specifications are supported.
                            126 ; * Note: b (binary) is a non-standard extension.
                            127 ; */
                            128 ;fprintf(int argc) {
   0000                     129 fprintf:
                            130 ;    int *nxtarg;
   0000 C5            [12]  131 	push	b
                            132 ;    #asm
   0001 32 20 00      [13]  133         sta     ccargc
   0004 AF            [ 4]  134         xra     a
   0005 32 21 00      [13]  135         sta     ccargc+1
                            136 ;    nxtarg = ccargc + &argc;
   0008 21 00 00      [10]  137 	lxi 	h,#0
   000B 39            [10]  138 	dad 	sp
   000C E5            [12]  139 	push	h
   000D 2A 20 00      [16]  140 	lhld	ccargc
   0010 E5            [12]  141 	push	h
   0011 21 08 00      [10]  142 	lxi 	h,#8
   0014 39            [10]  143 	dad 	sp
   0015 D1            [10]  144 	pop 	d
   0016 EB            [ 4]  145 	xchg
   0017 29            [10]  146 	dad 	h
   0018 EB            [ 4]  147 	xchg
   0019 19            [10]  148 	dad 	d
   001A D1            [10]  149 	pop 	d
   001B CD 00 00      [18]  150 	call	ccpint
                            151 ;	_string = NULL;
   001E 21 00 00      [10]  152 	lxi 	h,#0
   0021 22 24 00      [16]  153 	shld	_string
                            154 ;    return _print(*(--nxtarg), --nxtarg);
   0024 21 00 00      [10]  155 	lxi 	h,#0
   0027 39            [10]  156 	dad 	sp
   0028 E5            [12]  157 	push	h
   0029 CD 00 00      [18]  158 	call	ccgint
   002C 2B            [ 6]  159 	dcx 	h
   002D 2B            [ 6]  160 	dcx 	h
   002E D1            [10]  161 	pop 	d
   002F CD 00 00      [18]  162 	call	ccpint
   0032 CD 00 00      [18]  163 	call	ccgint
   0035 E5            [12]  164 	push	h
   0036 21 02 00      [10]  165 	lxi 	h,#2
   0039 39            [10]  166 	dad 	sp
   003A E5            [12]  167 	push	h
   003B CD 00 00      [18]  168 	call	ccgint
   003E 2B            [ 6]  169 	dcx 	h
   003F 2B            [ 6]  170 	dcx 	h
   0040 D1            [10]  171 	pop 	d
   0041 CD 00 00      [18]  172 	call	ccpint
   0044 E5            [12]  173 	push	h
   0045 3E 02         [ 7]  174 	mvi 	a,#2
   0047 CD E7 00      [18]  175 	call	_print
   004A C1            [10]  176 	pop 	b
   004B C1            [10]  177 	pop 	b
   004C C3 4F 00      [10]  178 	jmp 	$1
                            179 ;}
   004F                     180 $1:
   004F C1            [10]  181 	pop 	b
   0050 C9            [10]  182 	ret
                            183 ;/**
                            184 ; * printf(ctlstring, arg, arg, ...) - Formatted print.
                            185 ; * Operates as described by Kernighan & Ritchie.
                            186 ; * b, c, d, o, s, u, and x specifications are supported.
                            187 ; * Note: b (binary) is a non-standard extension.
                            188 ; */
                            189 ;printf(int argc) {
   0051                     190 printf:
                            191 ;    int *nxtarg;
   0051 C5            [12]  192 	push	b
                            193 ;    #asm
   0052 32 20 00      [13]  194         sta     ccargc
   0055 AF            [ 4]  195         xra     a
   0056 32 21 00      [13]  196         sta     ccargc+1
                            197 ;    nxtarg = ccargc + &argc - 1;
   0059 21 00 00      [10]  198 	lxi 	h,#0
   005C 39            [10]  199 	dad 	sp
   005D E5            [12]  200 	push	h
   005E 2A 20 00      [16]  201 	lhld	ccargc
   0061 E5            [12]  202 	push	h
   0062 21 08 00      [10]  203 	lxi 	h,#8
   0065 39            [10]  204 	dad 	sp
   0066 D1            [10]  205 	pop 	d
   0067 EB            [ 4]  206 	xchg
   0068 29            [10]  207 	dad 	h
   0069 EB            [ 4]  208 	xchg
   006A 19            [10]  209 	dad 	d
   006B E5            [12]  210 	push	h
   006C 21 01 00      [10]  211 	lxi 	h,#1
   006F 29            [10]  212 	dad 	h
   0070 D1            [10]  213 	pop 	d
   0071 CD 00 00      [18]  214 	call	ccsub
   0074 D1            [10]  215 	pop 	d
   0075 CD 00 00      [18]  216 	call	ccpint
                            217 ;	_string = NULL;
   0078 21 00 00      [10]  218 	lxi 	h,#0
   007B 22 24 00      [16]  219 	shld	_string
                            220 ;    return _print(stdout, nxtarg);
   007E 21 01 00      [10]  221 	lxi 	h,#1
   0081 E5            [12]  222 	push	h
   0082 21 02 00      [10]  223 	lxi 	h,#2
   0085 39            [10]  224 	dad 	sp
   0086 CD 00 00      [18]  225 	call	ccgint
   0089 E5            [12]  226 	push	h
   008A 3E 02         [ 7]  227 	mvi 	a,#2
   008C CD E7 00      [18]  228 	call	_print
   008F C1            [10]  229 	pop 	b
   0090 C1            [10]  230 	pop 	b
   0091 C3 94 00      [10]  231 	jmp 	$2
                            232 ;}
   0094                     233 $2:
   0094 C1            [10]  234 	pop 	b
   0095 C9            [10]  235 	ret
                            236 ;sprintf(int argc) {
   0096                     237 sprintf:
                            238 ;	int *nxtarg;
   0096 C5            [12]  239 	push	b
                            240 ;    #asm
   0097 32 20 00      [13]  241         sta     ccargc
   009A AF            [ 4]  242         xra     a
   009B 32 21 00      [13]  243         sta     ccargc+1
                            244 ;    nxtarg = ccargc + &argc;
   009E 21 00 00      [10]  245 	lxi 	h,#0
   00A1 39            [10]  246 	dad 	sp
   00A2 E5            [12]  247 	push	h
   00A3 2A 20 00      [16]  248 	lhld	ccargc
   00A6 E5            [12]  249 	push	h
   00A7 21 08 00      [10]  250 	lxi 	h,#8
   00AA 39            [10]  251 	dad 	sp
   00AB D1            [10]  252 	pop 	d
   00AC EB            [ 4]  253 	xchg
   00AD 29            [10]  254 	dad 	h
   00AE EB            [ 4]  255 	xchg
   00AF 19            [10]  256 	dad 	d
   00B0 D1            [10]  257 	pop 	d
   00B1 CD 00 00      [18]  258 	call	ccpint
                            259 ;	_string = *--nxtarg;
   00B4 21 00 00      [10]  260 	lxi 	h,#0
   00B7 39            [10]  261 	dad 	sp
   00B8 E5            [12]  262 	push	h
   00B9 CD 00 00      [18]  263 	call	ccgint
   00BC 2B            [ 6]  264 	dcx 	h
   00BD 2B            [ 6]  265 	dcx 	h
   00BE D1            [10]  266 	pop 	d
   00BF CD 00 00      [18]  267 	call	ccpint
   00C2 CD 00 00      [18]  268 	call	ccgint
   00C5 22 24 00      [16]  269 	shld	_string
                            270 ;	return _print(stdin, --nxtarg);
   00C8 21 00 00      [10]  271 	lxi 	h,#0
   00CB E5            [12]  272 	push	h
   00CC 21 02 00      [10]  273 	lxi 	h,#2
   00CF 39            [10]  274 	dad 	sp
   00D0 E5            [12]  275 	push	h
   00D1 CD 00 00      [18]  276 	call	ccgint
   00D4 2B            [ 6]  277 	dcx 	h
   00D5 2B            [ 6]  278 	dcx 	h
   00D6 D1            [10]  279 	pop 	d
   00D7 CD 00 00      [18]  280 	call	ccpint
   00DA E5            [12]  281 	push	h
   00DB 3E 02         [ 7]  282 	mvi 	a,#2
   00DD CD E7 00      [18]  283 	call	_print
   00E0 C1            [10]  284 	pop 	b
   00E1 C1            [10]  285 	pop 	b
   00E2 C3 E5 00      [10]  286 	jmp 	$3
                            287 ;}
   00E5                     288 $3:
   00E5 C1            [10]  289 	pop 	b
   00E6 C9            [10]  290 	ret
                            291 ;/**
                            292 ; * _print(fd, ctlstring, arg, arg, ...)
                            293 ; * Called by fprintf() and printf().
                            294 ; */
                            295 ;_print(int fd, int *nxtarg) {
   00E7                     296 _print:
                            297 ;    int arg, left, pad, cc, len, maxchr, width;
   00E7 C5            [12]  298 	push	b
   00E8 C5            [12]  299 	push	b
   00E9 C5            [12]  300 	push	b
   00EA C5            [12]  301 	push	b
   00EB C5            [12]  302 	push	b
   00EC C5            [12]  303 	push	b
   00ED C5            [12]  304 	push	b
                            305 ;    char *ctl, *sptr, str[17];
   00EE C5            [12]  306 	push	b
   00EF C5            [12]  307 	push	b
   00F0 EB            [ 4]  308 	xchg
   00F1 21 EF FF      [10]  309 	lxi 	h,#-17
   00F4 39            [10]  310 	dad 	sp
   00F5 F9            [ 6]  311 	sphl
   00F6 EB            [ 4]  312 	xchg
                            313 ;    cc = 0;
   00F7 21 1B 00      [10]  314 	lxi 	h,#27
   00FA 39            [10]  315 	dad 	sp
   00FB E5            [12]  316 	push	h
   00FC 21 00 00      [10]  317 	lxi 	h,#0
   00FF D1            [10]  318 	pop 	d
   0100 CD 00 00      [18]  319 	call	ccpint
                            320 ;    ctl = *nxtarg--;
   0103 21 13 00      [10]  321 	lxi 	h,#19
   0106 39            [10]  322 	dad 	sp
   0107 E5            [12]  323 	push	h
   0108 21 27 00      [10]  324 	lxi 	h,#39
   010B 39            [10]  325 	dad 	sp
   010C E5            [12]  326 	push	h
   010D CD 00 00      [18]  327 	call	ccgint
   0110 2B            [ 6]  328 	dcx 	h
   0111 2B            [ 6]  329 	dcx 	h
   0112 D1            [10]  330 	pop 	d
   0113 CD 00 00      [18]  331 	call	ccpint
   0116 23            [ 6]  332 	inx 	h
   0117 23            [ 6]  333 	inx 	h
   0118 CD 00 00      [18]  334 	call	ccgint
   011B D1            [10]  335 	pop 	d
   011C CD 00 00      [18]  336 	call	ccpint
                            337 ;    while (*ctl) {
   011F                     338 $5:
   011F 21 13 00      [10]  339 	lxi 	h,#19
   0122 39            [10]  340 	dad 	sp
   0123 CD 00 00      [18]  341 	call	ccgint
   0126 CD 00 00      [18]  342 	call	ccgchar
   0129 7C            [ 4]  343 	mov 	a,h
   012A B5            [ 4]  344 	ora 	l
   012B CA 89 05      [10]  345 	jz  	$6
                            346 ;        if (*ctl != '%') {
   012E 21 13 00      [10]  347 	lxi 	h,#19
   0131 39            [10]  348 	dad 	sp
   0132 CD 00 00      [18]  349 	call	ccgint
   0135 CD 00 00      [18]  350 	call	ccgchar
   0138 E5            [12]  351 	push	h
   0139 21 25 00      [10]  352 	lxi 	h,#37
   013C D1            [10]  353 	pop 	d
   013D CD 00 00      [18]  354 	call	ccne
   0140 7C            [ 4]  355 	mov 	a,h
   0141 B5            [ 4]  356 	ora 	l
   0142 CA 79 01      [10]  357 	jz  	$7
                            358 ;            _outc(*ctl++, fd);
   0145 21 13 00      [10]  359 	lxi 	h,#19
   0148 39            [10]  360 	dad 	sp
   0149 E5            [12]  361 	push	h
   014A CD 00 00      [18]  362 	call	ccgint
   014D 23            [ 6]  363 	inx 	h
   014E D1            [10]  364 	pop 	d
   014F CD 00 00      [18]  365 	call	ccpint
   0152 2B            [ 6]  366 	dcx 	h
   0153 CD 00 00      [18]  367 	call	ccgchar
   0156 E5            [12]  368 	push	h
   0157 21 29 00      [10]  369 	lxi 	h,#41
   015A 39            [10]  370 	dad 	sp
   015B CD 00 00      [18]  371 	call	ccgint
   015E E5            [12]  372 	push	h
   015F 3E 02         [ 7]  373 	mvi 	a,#2
   0161 CD 9B 05      [18]  374 	call	_outc
   0164 C1            [10]  375 	pop 	b
   0165 C1            [10]  376 	pop 	b
                            377 ;            ++cc;
   0166 21 1B 00      [10]  378 	lxi 	h,#27
   0169 39            [10]  379 	dad 	sp
   016A E5            [12]  380 	push	h
   016B CD 00 00      [18]  381 	call	ccgint
   016E 23            [ 6]  382 	inx 	h
   016F D1            [10]  383 	pop 	d
   0170 CD 00 00      [18]  384 	call	ccpint
                            385 ;            continue;
   0173 C3 1F 01      [10]  386 	jmp 	$5
                            387 ;        } else {
   0176 C3 86 01      [10]  388 	jmp 	$8
   0179                     389 $7:
                            390 ;            ++ctl;
   0179 21 13 00      [10]  391 	lxi 	h,#19
   017C 39            [10]  392 	dad 	sp
   017D E5            [12]  393 	push	h
   017E CD 00 00      [18]  394 	call	ccgint
   0181 23            [ 6]  395 	inx 	h
   0182 D1            [10]  396 	pop 	d
   0183 CD 00 00      [18]  397 	call	ccpint
                            398 ;        }
   0186                     399 $8:
                            400 ;        if (*ctl == '%') {
   0186 21 13 00      [10]  401 	lxi 	h,#19
   0189 39            [10]  402 	dad 	sp
   018A CD 00 00      [18]  403 	call	ccgint
   018D CD 00 00      [18]  404 	call	ccgchar
   0190 E5            [12]  405 	push	h
   0191 21 25 00      [10]  406 	lxi 	h,#37
   0194 D1            [10]  407 	pop 	d
   0195 CD 00 00      [18]  408 	call	cceq
   0198 7C            [ 4]  409 	mov 	a,h
   0199 B5            [ 4]  410 	ora 	l
   019A CA CE 01      [10]  411 	jz  	$9
                            412 ;            _outc(*ctl++, fd);
   019D 21 13 00      [10]  413 	lxi 	h,#19
   01A0 39            [10]  414 	dad 	sp
   01A1 E5            [12]  415 	push	h
   01A2 CD 00 00      [18]  416 	call	ccgint
   01A5 23            [ 6]  417 	inx 	h
   01A6 D1            [10]  418 	pop 	d
   01A7 CD 00 00      [18]  419 	call	ccpint
   01AA 2B            [ 6]  420 	dcx 	h
   01AB CD 00 00      [18]  421 	call	ccgchar
   01AE E5            [12]  422 	push	h
   01AF 21 29 00      [10]  423 	lxi 	h,#41
   01B2 39            [10]  424 	dad 	sp
   01B3 CD 00 00      [18]  425 	call	ccgint
   01B6 E5            [12]  426 	push	h
   01B7 3E 02         [ 7]  427 	mvi 	a,#2
   01B9 CD 9B 05      [18]  428 	call	_outc
   01BC C1            [10]  429 	pop 	b
   01BD C1            [10]  430 	pop 	b
                            431 ;            ++cc;
   01BE 21 1B 00      [10]  432 	lxi 	h,#27
   01C1 39            [10]  433 	dad 	sp
   01C2 E5            [12]  434 	push	h
   01C3 CD 00 00      [18]  435 	call	ccgint
   01C6 23            [ 6]  436 	inx 	h
   01C7 D1            [10]  437 	pop 	d
   01C8 CD 00 00      [18]  438 	call	ccpint
                            439 ;            continue;
   01CB C3 1F 01      [10]  440 	jmp 	$5
                            441 ;        }
                            442 ;        if (*ctl == '-') {
   01CE                     443 $9:
   01CE 21 13 00      [10]  444 	lxi 	h,#19
   01D1 39            [10]  445 	dad 	sp
   01D2 CD 00 00      [18]  446 	call	ccgint
   01D5 CD 00 00      [18]  447 	call	ccgchar
   01D8 E5            [12]  448 	push	h
   01D9 21 2D 00      [10]  449 	lxi 	h,#45
   01DC D1            [10]  450 	pop 	d
   01DD CD 00 00      [18]  451 	call	cceq
   01E0 7C            [ 4]  452 	mov 	a,h
   01E1 B5            [ 4]  453 	ora 	l
   01E2 CA 01 02      [10]  454 	jz  	$10
                            455 ;            left = 1;
   01E5 21 1F 00      [10]  456 	lxi 	h,#31
   01E8 39            [10]  457 	dad 	sp
   01E9 E5            [12]  458 	push	h
   01EA 21 01 00      [10]  459 	lxi 	h,#1
   01ED D1            [10]  460 	pop 	d
   01EE CD 00 00      [18]  461 	call	ccpint
                            462 ;            ++ctl;
   01F1 21 13 00      [10]  463 	lxi 	h,#19
   01F4 39            [10]  464 	dad 	sp
   01F5 E5            [12]  465 	push	h
   01F6 CD 00 00      [18]  466 	call	ccgint
   01F9 23            [ 6]  467 	inx 	h
   01FA D1            [10]  468 	pop 	d
   01FB CD 00 00      [18]  469 	call	ccpint
                            470 ;        } else left = 0;
   01FE C3 0D 02      [10]  471 	jmp 	$11
   0201                     472 $10:
   0201 21 1F 00      [10]  473 	lxi 	h,#31
   0204 39            [10]  474 	dad 	sp
   0205 E5            [12]  475 	push	h
   0206 21 00 00      [10]  476 	lxi 	h,#0
   0209 D1            [10]  477 	pop 	d
   020A CD 00 00      [18]  478 	call	ccpint
   020D                     479 $11:
                            480 ;        if (*ctl == '0') pad = '0';
   020D 21 13 00      [10]  481 	lxi 	h,#19
   0210 39            [10]  482 	dad 	sp
   0211 CD 00 00      [18]  483 	call	ccgint
   0214 CD 00 00      [18]  484 	call	ccgchar
   0217 E5            [12]  485 	push	h
   0218 21 30 00      [10]  486 	lxi 	h,#48
   021B D1            [10]  487 	pop 	d
   021C CD 00 00      [18]  488 	call	cceq
   021F 7C            [ 4]  489 	mov 	a,h
   0220 B5            [ 4]  490 	ora 	l
   0221 CA 33 02      [10]  491 	jz  	$12
   0224 21 1D 00      [10]  492 	lxi 	h,#29
   0227 39            [10]  493 	dad 	sp
   0228 E5            [12]  494 	push	h
   0229 21 30 00      [10]  495 	lxi 	h,#48
   022C D1            [10]  496 	pop 	d
   022D CD 00 00      [18]  497 	call	ccpint
                            498 ;        else pad = ' ';
   0230 C3 3F 02      [10]  499 	jmp 	$13
   0233                     500 $12:
   0233 21 1D 00      [10]  501 	lxi 	h,#29
   0236 39            [10]  502 	dad 	sp
   0237 E5            [12]  503 	push	h
   0238 21 20 00      [10]  504 	lxi 	h,#32
   023B D1            [10]  505 	pop 	d
   023C CD 00 00      [18]  506 	call	ccpint
   023F                     507 $13:
                            508 ;        if (isdigit(*ctl)) {
   023F 21 13 00      [10]  509 	lxi 	h,#19
   0242 39            [10]  510 	dad 	sp
   0243 CD 00 00      [18]  511 	call	ccgint
   0246 CD 00 00      [18]  512 	call	ccgchar
   0249 E5            [12]  513 	push	h
   024A 3E 01         [ 7]  514 	mvi 	a,#1
   024C CD 00 00      [18]  515 	call	isdigit
   024F C1            [10]  516 	pop 	b
   0250 7C            [ 4]  517 	mov 	a,h
   0251 B5            [ 4]  518 	ora 	l
   0252 CA 9C 02      [10]  519 	jz  	$14
                            520 ;            width = atoi(ctl++);
   0255 21 15 00      [10]  521 	lxi 	h,#21
   0258 39            [10]  522 	dad 	sp
   0259 E5            [12]  523 	push	h
   025A 21 15 00      [10]  524 	lxi 	h,#21
   025D 39            [10]  525 	dad 	sp
   025E E5            [12]  526 	push	h
   025F CD 00 00      [18]  527 	call	ccgint
   0262 23            [ 6]  528 	inx 	h
   0263 D1            [10]  529 	pop 	d
   0264 CD 00 00      [18]  530 	call	ccpint
   0267 2B            [ 6]  531 	dcx 	h
   0268 E5            [12]  532 	push	h
   0269 3E 01         [ 7]  533 	mvi 	a,#1
   026B CD 00 00      [18]  534 	call	atoi
   026E C1            [10]  535 	pop 	b
   026F D1            [10]  536 	pop 	d
   0270 CD 00 00      [18]  537 	call	ccpint
                            538 ;            while (isdigit(*ctl)) ++ctl;
   0273                     539 $15:
   0273 21 13 00      [10]  540 	lxi 	h,#19
   0276 39            [10]  541 	dad 	sp
   0277 CD 00 00      [18]  542 	call	ccgint
   027A CD 00 00      [18]  543 	call	ccgchar
   027D E5            [12]  544 	push	h
   027E 3E 01         [ 7]  545 	mvi 	a,#1
   0280 CD 00 00      [18]  546 	call	isdigit
   0283 C1            [10]  547 	pop 	b
   0284 7C            [ 4]  548 	mov 	a,h
   0285 B5            [ 4]  549 	ora 	l
   0286 CA 99 02      [10]  550 	jz  	$16
   0289 21 13 00      [10]  551 	lxi 	h,#19
   028C 39            [10]  552 	dad 	sp
   028D E5            [12]  553 	push	h
   028E CD 00 00      [18]  554 	call	ccgint
   0291 23            [ 6]  555 	inx 	h
   0292 D1            [10]  556 	pop 	d
   0293 CD 00 00      [18]  557 	call	ccpint
   0296 C3 73 02      [10]  558 	jmp 	$15
   0299                     559 $16:
                            560 ;        } else width = 0;
   0299 C3 A8 02      [10]  561 	jmp 	$17
   029C                     562 $14:
   029C 21 15 00      [10]  563 	lxi 	h,#21
   029F 39            [10]  564 	dad 	sp
   02A0 E5            [12]  565 	push	h
   02A1 21 00 00      [10]  566 	lxi 	h,#0
   02A4 D1            [10]  567 	pop 	d
   02A5 CD 00 00      [18]  568 	call	ccpint
   02A8                     569 $17:
                            570 ;        if (*ctl == '.') {
   02A8 21 13 00      [10]  571 	lxi 	h,#19
   02AB 39            [10]  572 	dad 	sp
   02AC CD 00 00      [18]  573 	call	ccgint
   02AF CD 00 00      [18]  574 	call	ccgchar
   02B2 E5            [12]  575 	push	h
   02B3 21 2E 00      [10]  576 	lxi 	h,#46
   02B6 D1            [10]  577 	pop 	d
   02B7 CD 00 00      [18]  578 	call	cceq
   02BA 7C            [ 4]  579 	mov 	a,h
   02BB B5            [ 4]  580 	ora 	l
   02BC CA 05 03      [10]  581 	jz  	$18
                            582 ;            maxchr = atoi(++ctl);
   02BF 21 17 00      [10]  583 	lxi 	h,#23
   02C2 39            [10]  584 	dad 	sp
   02C3 E5            [12]  585 	push	h
   02C4 21 15 00      [10]  586 	lxi 	h,#21
   02C7 39            [10]  587 	dad 	sp
   02C8 E5            [12]  588 	push	h
   02C9 CD 00 00      [18]  589 	call	ccgint
   02CC 23            [ 6]  590 	inx 	h
   02CD D1            [10]  591 	pop 	d
   02CE CD 00 00      [18]  592 	call	ccpint
   02D1 E5            [12]  593 	push	h
   02D2 3E 01         [ 7]  594 	mvi 	a,#1
   02D4 CD 00 00      [18]  595 	call	atoi
   02D7 C1            [10]  596 	pop 	b
   02D8 D1            [10]  597 	pop 	d
   02D9 CD 00 00      [18]  598 	call	ccpint
                            599 ;            while (isdigit(*ctl)) ++ctl;
   02DC                     600 $19:
   02DC 21 13 00      [10]  601 	lxi 	h,#19
   02DF 39            [10]  602 	dad 	sp
   02E0 CD 00 00      [18]  603 	call	ccgint
   02E3 CD 00 00      [18]  604 	call	ccgchar
   02E6 E5            [12]  605 	push	h
   02E7 3E 01         [ 7]  606 	mvi 	a,#1
   02E9 CD 00 00      [18]  607 	call	isdigit
   02EC C1            [10]  608 	pop 	b
   02ED 7C            [ 4]  609 	mov 	a,h
   02EE B5            [ 4]  610 	ora 	l
   02EF CA 02 03      [10]  611 	jz  	$20
   02F2 21 13 00      [10]  612 	lxi 	h,#19
   02F5 39            [10]  613 	dad 	sp
   02F6 E5            [12]  614 	push	h
   02F7 CD 00 00      [18]  615 	call	ccgint
   02FA 23            [ 6]  616 	inx 	h
   02FB D1            [10]  617 	pop 	d
   02FC CD 00 00      [18]  618 	call	ccpint
   02FF C3 DC 02      [10]  619 	jmp 	$19
   0302                     620 $20:
                            621 ;        } else maxchr = 0;
   0302 C3 11 03      [10]  622 	jmp 	$21
   0305                     623 $18:
   0305 21 17 00      [10]  624 	lxi 	h,#23
   0308 39            [10]  625 	dad 	sp
   0309 E5            [12]  626 	push	h
   030A 21 00 00      [10]  627 	lxi 	h,#0
   030D D1            [10]  628 	pop 	d
   030E CD 00 00      [18]  629 	call	ccpint
   0311                     630 $21:
                            631 ;        arg = *nxtarg--;
   0311 21 21 00      [10]  632 	lxi 	h,#33
   0314 39            [10]  633 	dad 	sp
   0315 E5            [12]  634 	push	h
   0316 21 27 00      [10]  635 	lxi 	h,#39
   0319 39            [10]  636 	dad 	sp
   031A E5            [12]  637 	push	h
   031B CD 00 00      [18]  638 	call	ccgint
   031E 2B            [ 6]  639 	dcx 	h
   031F 2B            [ 6]  640 	dcx 	h
   0320 D1            [10]  641 	pop 	d
   0321 CD 00 00      [18]  642 	call	ccpint
   0324 23            [ 6]  643 	inx 	h
   0325 23            [ 6]  644 	inx 	h
   0326 CD 00 00      [18]  645 	call	ccgint
   0329 D1            [10]  646 	pop 	d
   032A CD 00 00      [18]  647 	call	ccpint
                            648 ;        sptr = str;
   032D 21 11 00      [10]  649 	lxi 	h,#17
   0330 39            [10]  650 	dad 	sp
   0331 E5            [12]  651 	push	h
   0332 21 02 00      [10]  652 	lxi 	h,#2
   0335 39            [10]  653 	dad 	sp
   0336 D1            [10]  654 	pop 	d
   0337 CD 00 00      [18]  655 	call	ccpint
                            656 ;        switch (*ctl++) {
   033A 21 00 00      [10]  657 	lxi 	h,$22
   033D E5            [12]  658 	push	h
   033E 21 15 00      [10]  659 	lxi 	h,#21
   0341 39            [10]  660 	dad 	sp
   0342 E5            [12]  661 	push	h
   0343 CD 00 00      [18]  662 	call	ccgint
   0346 23            [ 6]  663 	inx 	h
   0347 D1            [10]  664 	pop 	d
   0348 CD 00 00      [18]  665 	call	ccpint
   034B 2B            [ 6]  666 	dcx 	h
   034C CD 00 00      [18]  667 	call	ccgchar
   034F C3 00 00      [10]  668 	jmp 	cccase
                            669 ;            case 'c': str[0] = arg;
   0352                     670 $24:
   0352 21 00 00      [10]  671 	lxi 	h,#0
   0355 39            [10]  672 	dad 	sp
   0356 E5            [12]  673 	push	h
   0357 21 00 00      [10]  674 	lxi 	h,#0
   035A D1            [10]  675 	pop 	d
   035B 19            [10]  676 	dad 	d
   035C E5            [12]  677 	push	h
   035D 21 23 00      [10]  678 	lxi 	h,#35
   0360 39            [10]  679 	dad 	sp
   0361 CD 00 00      [18]  680 	call	ccgint
   0364 D1            [10]  681 	pop 	d
   0365 7D            [ 4]  682 	mov 	a,l
   0366 12            [ 7]  683 	stax	d
                            684 ;                str[1] = NULL;
   0367 21 00 00      [10]  685 	lxi 	h,#0
   036A 39            [10]  686 	dad 	sp
   036B E5            [12]  687 	push	h
   036C 21 01 00      [10]  688 	lxi 	h,#1
   036F D1            [10]  689 	pop 	d
   0370 19            [10]  690 	dad 	d
   0371 E5            [12]  691 	push	h
   0372 21 00 00      [10]  692 	lxi 	h,#0
   0375 D1            [10]  693 	pop 	d
   0376 7D            [ 4]  694 	mov 	a,l
   0377 12            [ 7]  695 	stax	d
                            696 ;                break;
   0378 C3 22 04      [10]  697 	jmp 	$23
                            698 ;            case 's': sptr = arg;
   037B                     699 $25:
   037B 21 11 00      [10]  700 	lxi 	h,#17
   037E 39            [10]  701 	dad 	sp
   037F E5            [12]  702 	push	h
   0380 21 23 00      [10]  703 	lxi 	h,#35
   0383 39            [10]  704 	dad 	sp
   0384 CD 00 00      [18]  705 	call	ccgint
   0387 D1            [10]  706 	pop 	d
   0388 CD 00 00      [18]  707 	call	ccpint
                            708 ;                break;
   038B C3 22 04      [10]  709 	jmp 	$23
                            710 ;            case 'd': itoa(arg, str);
   038E                     711 $26:
   038E 21 21 00      [10]  712 	lxi 	h,#33
   0391 39            [10]  713 	dad 	sp
   0392 CD 00 00      [18]  714 	call	ccgint
   0395 E5            [12]  715 	push	h
   0396 21 02 00      [10]  716 	lxi 	h,#2
   0399 39            [10]  717 	dad 	sp
   039A E5            [12]  718 	push	h
   039B 3E 02         [ 7]  719 	mvi 	a,#2
   039D CD 00 00      [18]  720 	call	itoa
   03A0 C1            [10]  721 	pop 	b
   03A1 C1            [10]  722 	pop 	b
                            723 ;                break;
   03A2 C3 22 04      [10]  724 	jmp 	$23
                            725 ;            case 'b': utoab(arg, str, 2);
   03A5                     726 $27:
   03A5 21 21 00      [10]  727 	lxi 	h,#33
   03A8 39            [10]  728 	dad 	sp
   03A9 CD 00 00      [18]  729 	call	ccgint
   03AC E5            [12]  730 	push	h
   03AD 21 02 00      [10]  731 	lxi 	h,#2
   03B0 39            [10]  732 	dad 	sp
   03B1 E5            [12]  733 	push	h
   03B2 21 02 00      [10]  734 	lxi 	h,#2
   03B5 E5            [12]  735 	push	h
   03B6 3E 03         [ 7]  736 	mvi 	a,#3
   03B8 CD 00 00      [18]  737 	call	utoab
   03BB C1            [10]  738 	pop 	b
   03BC C1            [10]  739 	pop 	b
   03BD C1            [10]  740 	pop 	b
                            741 ;                break;
   03BE C3 22 04      [10]  742 	jmp 	$23
                            743 ;            case 'o': utoab(arg, str, 8);
   03C1                     744 $28:
   03C1 21 21 00      [10]  745 	lxi 	h,#33
   03C4 39            [10]  746 	dad 	sp
   03C5 CD 00 00      [18]  747 	call	ccgint
   03C8 E5            [12]  748 	push	h
   03C9 21 02 00      [10]  749 	lxi 	h,#2
   03CC 39            [10]  750 	dad 	sp
   03CD E5            [12]  751 	push	h
   03CE 21 08 00      [10]  752 	lxi 	h,#8
   03D1 E5            [12]  753 	push	h
   03D2 3E 03         [ 7]  754 	mvi 	a,#3
   03D4 CD 00 00      [18]  755 	call	utoab
   03D7 C1            [10]  756 	pop 	b
   03D8 C1            [10]  757 	pop 	b
   03D9 C1            [10]  758 	pop 	b
                            759 ;                break;
   03DA C3 22 04      [10]  760 	jmp 	$23
                            761 ;            case 'u': utoab(arg, str, 10);
   03DD                     762 $29:
   03DD 21 21 00      [10]  763 	lxi 	h,#33
   03E0 39            [10]  764 	dad 	sp
   03E1 CD 00 00      [18]  765 	call	ccgint
   03E4 E5            [12]  766 	push	h
   03E5 21 02 00      [10]  767 	lxi 	h,#2
   03E8 39            [10]  768 	dad 	sp
   03E9 E5            [12]  769 	push	h
   03EA 21 0A 00      [10]  770 	lxi 	h,#10
   03ED E5            [12]  771 	push	h
   03EE 3E 03         [ 7]  772 	mvi 	a,#3
   03F0 CD 00 00      [18]  773 	call	utoab
   03F3 C1            [10]  774 	pop 	b
   03F4 C1            [10]  775 	pop 	b
   03F5 C1            [10]  776 	pop 	b
                            777 ;                break;
   03F6 C3 22 04      [10]  778 	jmp 	$23
                            779 ;            case 'x': utoab(arg, str, 16);
   03F9                     780 $30:
   03F9 21 21 00      [10]  781 	lxi 	h,#33
   03FC 39            [10]  782 	dad 	sp
   03FD CD 00 00      [18]  783 	call	ccgint
   0400 E5            [12]  784 	push	h
   0401 21 02 00      [10]  785 	lxi 	h,#2
   0404 39            [10]  786 	dad 	sp
   0405 E5            [12]  787 	push	h
   0406 21 10 00      [10]  788 	lxi 	h,#16
   0409 E5            [12]  789 	push	h
   040A 3E 03         [ 7]  790 	mvi 	a,#3
   040C CD 00 00      [18]  791 	call	utoab
   040F C1            [10]  792 	pop 	b
   0410 C1            [10]  793 	pop 	b
   0411 C1            [10]  794 	pop 	b
                            795 ;                break;
   0412 C3 22 04      [10]  796 	jmp 	$23
                            797 ;            default: return (cc);
   0415                     798 $31:
   0415 21 1B 00      [10]  799 	lxi 	h,#27
   0418 39            [10]  800 	dad 	sp
   0419 CD 00 00      [18]  801 	call	ccgint
   041C C3 93 05      [10]  802 	jmp 	$4
                            803 ;        }
   041F C3 22 04      [10]  804 	jmp 	$23
                            805 		.area  SMALLC_GENERATED_DATA  (REL,CON,DSEG)
   0000                     806 $22:
   0000 63 00 52 03 73 00   807 	.dw	#99,$24,#115,$25,#100,$26,#98,$27
        7B 03 64 00 8E 03
        62 00 A5 03
   0010 6F 00 C1 03 75 00   808 	.dw	#111,$28,#117,$29,#120,$30
        DD 03 78 00 F9 03
   001C 15 04 00 00         809 	.dw	$31,0
                            810 		.area  SMALLC_GENERATED  (REL,CON,CSEG)
   0422                     811 $23:
                            812 ;        len = strlen(sptr);
   0422 21 19 00      [10]  813 	lxi 	h,#25
   0425 39            [10]  814 	dad 	sp
   0426 E5            [12]  815 	push	h
   0427 21 13 00      [10]  816 	lxi 	h,#19
   042A 39            [10]  817 	dad 	sp
   042B CD 00 00      [18]  818 	call	ccgint
   042E E5            [12]  819 	push	h
   042F 3E 01         [ 7]  820 	mvi 	a,#1
   0431 CD 00 00      [18]  821 	call	strlen
   0434 C1            [10]  822 	pop 	b
   0435 D1            [10]  823 	pop 	d
   0436 CD 00 00      [18]  824 	call	ccpint
                            825 ;        if (maxchr && maxchr < len) {
   0439 21 17 00      [10]  826 	lxi 	h,#23
   043C 39            [10]  827 	dad 	sp
   043D CD 00 00      [18]  828 	call	ccgint
   0440 7C            [ 4]  829 	mov 	a,h
   0441 B5            [ 4]  830 	ora 	l
   0442 CA 58 04      [10]  831 	jz  	$33
   0445 21 17 00      [10]  832 	lxi 	h,#23
   0448 39            [10]  833 	dad 	sp
   0449 CD 00 00      [18]  834 	call	ccgint
   044C E5            [12]  835 	push	h
   044D 21 1B 00      [10]  836 	lxi 	h,#27
   0450 39            [10]  837 	dad 	sp
   0451 CD 00 00      [18]  838 	call	ccgint
   0454 D1            [10]  839 	pop 	d
   0455 CD 00 00      [18]  840 	call	cclt
   0458                     841 $33:
   0458 CD 00 00      [18]  842 	call	ccbool
   045B 7C            [ 4]  843 	mov 	a,h
   045C B5            [ 4]  844 	ora 	l
   045D CA 70 04      [10]  845 	jz  	$32
                            846 ;            len = maxchr;
   0460 21 19 00      [10]  847 	lxi 	h,#25
   0463 39            [10]  848 	dad 	sp
   0464 E5            [12]  849 	push	h
   0465 21 19 00      [10]  850 	lxi 	h,#25
   0468 39            [10]  851 	dad 	sp
   0469 CD 00 00      [18]  852 	call	ccgint
   046C D1            [10]  853 	pop 	d
   046D CD 00 00      [18]  854 	call	ccpint
                            855 ;        }
                            856 ;        if (width > len) {
   0470                     857 $32:
   0470 21 15 00      [10]  858 	lxi 	h,#21
   0473 39            [10]  859 	dad 	sp
   0474 CD 00 00      [18]  860 	call	ccgint
   0477 E5            [12]  861 	push	h
   0478 21 1B 00      [10]  862 	lxi 	h,#27
   047B 39            [10]  863 	dad 	sp
   047C CD 00 00      [18]  864 	call	ccgint
   047F D1            [10]  865 	pop 	d
   0480 CD 00 00      [18]  866 	call	ccgt
   0483 7C            [ 4]  867 	mov 	a,h
   0484 B5            [ 4]  868 	ora 	l
   0485 CA A7 04      [10]  869 	jz  	$34
                            870 ;            width = width - len;
   0488 21 15 00      [10]  871 	lxi 	h,#21
   048B 39            [10]  872 	dad 	sp
   048C E5            [12]  873 	push	h
   048D 21 17 00      [10]  874 	lxi 	h,#23
   0490 39            [10]  875 	dad 	sp
   0491 CD 00 00      [18]  876 	call	ccgint
   0494 E5            [12]  877 	push	h
   0495 21 1D 00      [10]  878 	lxi 	h,#29
   0498 39            [10]  879 	dad 	sp
   0499 CD 00 00      [18]  880 	call	ccgint
   049C D1            [10]  881 	pop 	d
   049D CD 00 00      [18]  882 	call	ccsub
   04A0 D1            [10]  883 	pop 	d
   04A1 CD 00 00      [18]  884 	call	ccpint
                            885 ;        } else {
   04A4 C3 B3 04      [10]  886 	jmp 	$35
   04A7                     887 $34:
                            888 ;            width = 0;
   04A7 21 15 00      [10]  889 	lxi 	h,#21
   04AA 39            [10]  890 	dad 	sp
   04AB E5            [12]  891 	push	h
   04AC 21 00 00      [10]  892 	lxi 	h,#0
   04AF D1            [10]  893 	pop 	d
   04B0 CD 00 00      [18]  894 	call	ccpint
                            895 ;        }
   04B3                     896 $35:
                            897 ;        if (!left) {
   04B3 21 1F 00      [10]  898 	lxi 	h,#31
   04B6 39            [10]  899 	dad 	sp
   04B7 CD 00 00      [18]  900 	call	ccgint
   04BA CD 00 00      [18]  901 	call	cclneg
   04BD 7C            [ 4]  902 	mov 	a,h
   04BE B5            [ 4]  903 	ora 	l
   04BF CA FC 04      [10]  904 	jz  	$36
                            905 ;            while (width--) {
   04C2                     906 $37:
   04C2 21 15 00      [10]  907 	lxi 	h,#21
   04C5 39            [10]  908 	dad 	sp
   04C6 E5            [12]  909 	push	h
   04C7 CD 00 00      [18]  910 	call	ccgint
   04CA 2B            [ 6]  911 	dcx 	h
   04CB D1            [10]  912 	pop 	d
   04CC CD 00 00      [18]  913 	call	ccpint
   04CF 23            [ 6]  914 	inx 	h
   04D0 7C            [ 4]  915 	mov 	a,h
   04D1 B5            [ 4]  916 	ora 	l
   04D2 CA FC 04      [10]  917 	jz  	$38
                            918 ;                _outc(pad, fd);
   04D5 21 1D 00      [10]  919 	lxi 	h,#29
   04D8 39            [10]  920 	dad 	sp
   04D9 CD 00 00      [18]  921 	call	ccgint
   04DC E5            [12]  922 	push	h
   04DD 21 29 00      [10]  923 	lxi 	h,#41
   04E0 39            [10]  924 	dad 	sp
   04E1 CD 00 00      [18]  925 	call	ccgint
   04E4 E5            [12]  926 	push	h
   04E5 3E 02         [ 7]  927 	mvi 	a,#2
   04E7 CD 9B 05      [18]  928 	call	_outc
   04EA C1            [10]  929 	pop 	b
   04EB C1            [10]  930 	pop 	b
                            931 ;                ++cc;
   04EC 21 1B 00      [10]  932 	lxi 	h,#27
   04EF 39            [10]  933 	dad 	sp
   04F0 E5            [12]  934 	push	h
   04F1 CD 00 00      [18]  935 	call	ccgint
   04F4 23            [ 6]  936 	inx 	h
   04F5 D1            [10]  937 	pop 	d
   04F6 CD 00 00      [18]  938 	call	ccpint
                            939 ;            }
   04F9 C3 C2 04      [10]  940 	jmp 	$37
   04FC                     941 $38:
                            942 ;        }
                            943 ;        while (len--) {
   04FC                     944 $36:
   04FC                     945 $39:
   04FC 21 19 00      [10]  946 	lxi 	h,#25
   04FF 39            [10]  947 	dad 	sp
   0500 E5            [12]  948 	push	h
   0501 CD 00 00      [18]  949 	call	ccgint
   0504 2B            [ 6]  950 	dcx 	h
   0505 D1            [10]  951 	pop 	d
   0506 CD 00 00      [18]  952 	call	ccpint
   0509 23            [ 6]  953 	inx 	h
   050A 7C            [ 4]  954 	mov 	a,h
   050B B5            [ 4]  955 	ora 	l
   050C CA 40 05      [10]  956 	jz  	$40
                            957 ;            _outc(*sptr++, fd);
   050F 21 11 00      [10]  958 	lxi 	h,#17
   0512 39            [10]  959 	dad 	sp
   0513 E5            [12]  960 	push	h
   0514 CD 00 00      [18]  961 	call	ccgint
   0517 23            [ 6]  962 	inx 	h
   0518 D1            [10]  963 	pop 	d
   0519 CD 00 00      [18]  964 	call	ccpint
   051C 2B            [ 6]  965 	dcx 	h
   051D CD 00 00      [18]  966 	call	ccgchar
   0520 E5            [12]  967 	push	h
   0521 21 29 00      [10]  968 	lxi 	h,#41
   0524 39            [10]  969 	dad 	sp
   0525 CD 00 00      [18]  970 	call	ccgint
   0528 E5            [12]  971 	push	h
   0529 3E 02         [ 7]  972 	mvi 	a,#2
   052B CD 9B 05      [18]  973 	call	_outc
   052E C1            [10]  974 	pop 	b
   052F C1            [10]  975 	pop 	b
                            976 ;            ++cc;
   0530 21 1B 00      [10]  977 	lxi 	h,#27
   0533 39            [10]  978 	dad 	sp
   0534 E5            [12]  979 	push	h
   0535 CD 00 00      [18]  980 	call	ccgint
   0538 23            [ 6]  981 	inx 	h
   0539 D1            [10]  982 	pop 	d
   053A CD 00 00      [18]  983 	call	ccpint
                            984 ;        }
   053D C3 FC 04      [10]  985 	jmp 	$39
   0540                     986 $40:
                            987 ;        if (left) {
   0540 21 1F 00      [10]  988 	lxi 	h,#31
   0543 39            [10]  989 	dad 	sp
   0544 CD 00 00      [18]  990 	call	ccgint
   0547 7C            [ 4]  991 	mov 	a,h
   0548 B5            [ 4]  992 	ora 	l
   0549 CA 86 05      [10]  993 	jz  	$41
                            994 ;            while (width--) {
   054C                     995 $42:
   054C 21 15 00      [10]  996 	lxi 	h,#21
   054F 39            [10]  997 	dad 	sp
   0550 E5            [12]  998 	push	h
   0551 CD 00 00      [18]  999 	call	ccgint
   0554 2B            [ 6] 1000 	dcx 	h
   0555 D1            [10] 1001 	pop 	d
   0556 CD 00 00      [18] 1002 	call	ccpint
   0559 23            [ 6] 1003 	inx 	h
   055A 7C            [ 4] 1004 	mov 	a,h
   055B B5            [ 4] 1005 	ora 	l
   055C CA 86 05      [10] 1006 	jz  	$43
                           1007 ;                _outc(pad, fd);
   055F 21 1D 00      [10] 1008 	lxi 	h,#29
   0562 39            [10] 1009 	dad 	sp
   0563 CD 00 00      [18] 1010 	call	ccgint
   0566 E5            [12] 1011 	push	h
   0567 21 29 00      [10] 1012 	lxi 	h,#41
   056A 39            [10] 1013 	dad 	sp
   056B CD 00 00      [18] 1014 	call	ccgint
   056E E5            [12] 1015 	push	h
   056F 3E 02         [ 7] 1016 	mvi 	a,#2
   0571 CD 9B 05      [18] 1017 	call	_outc
   0574 C1            [10] 1018 	pop 	b
   0575 C1            [10] 1019 	pop 	b
                           1020 ;                ++cc;
   0576 21 1B 00      [10] 1021 	lxi 	h,#27
   0579 39            [10] 1022 	dad 	sp
   057A E5            [12] 1023 	push	h
   057B CD 00 00      [18] 1024 	call	ccgint
   057E 23            [ 6] 1025 	inx 	h
   057F D1            [10] 1026 	pop 	d
   0580 CD 00 00      [18] 1027 	call	ccpint
                           1028 ;            }
   0583 C3 4C 05      [10] 1029 	jmp 	$42
   0586                    1030 $43:
                           1031 ;        }
                           1032 ;    }
   0586                    1033 $41:
   0586 C3 1F 01      [10] 1034 	jmp 	$5
   0589                    1035 $6:
                           1036 ;    return (cc);
   0589 21 1B 00      [10] 1037 	lxi 	h,#27
   058C 39            [10] 1038 	dad 	sp
   058D CD 00 00      [18] 1039 	call	ccgint
   0590 C3 93 05      [10] 1040 	jmp 	$4
                           1041 ;}
   0593                    1042 $4:
   0593 EB            [ 4] 1043 	xchg
   0594 21 23 00      [10] 1044 	lxi 	h,#35
   0597 39            [10] 1045 	dad 	sp
   0598 F9            [ 6] 1046 	sphl
   0599 EB            [ 4] 1047 	xchg
   059A C9            [10] 1048 	ret
                           1049 ;/**
                           1050 ; * _outc - output a single character
                           1051 ; * if _string is not null send output to a string instead
                           1052 ; */
                           1053 ;_outc(char c, int fd) {
   059B                    1054 _outc:
                           1055 ;	if (_string == NULL)
   059B 2A 24 00      [16] 1056 	lhld	_string
   059E E5            [12] 1057 	push	h
   059F 21 00 00      [10] 1058 	lxi 	h,#0
   05A2 D1            [10] 1059 	pop 	d
   05A3 CD 00 00      [18] 1060 	call	cceq
   05A6 7C            [ 4] 1061 	mov 	a,h
   05A7 B5            [ 4] 1062 	ora 	l
   05A8 CA C5 05      [10] 1063 	jz  	$45
                           1064 ;		fputc(c, fd);
   05AB 21 04 00      [10] 1065 	lxi 	h,#4
   05AE 39            [10] 1066 	dad 	sp
   05AF CD 00 00      [18] 1067 	call	ccgchar
   05B2 E5            [12] 1068 	push	h
   05B3 21 04 00      [10] 1069 	lxi 	h,#4
   05B6 39            [10] 1070 	dad 	sp
   05B7 CD 00 00      [18] 1071 	call	ccgint
   05BA E5            [12] 1072 	push	h
   05BB 3E 02         [ 7] 1073 	mvi 	a,#2
   05BD CD 00 00      [18] 1074 	call	fputc
   05C0 C1            [10] 1075 	pop 	b
   05C1 C1            [10] 1076 	pop 	b
                           1077 ;	else
   05C2 C3 D8 05      [10] 1078 	jmp 	$46
   05C5                    1079 $45:
                           1080 ;		*_string++ = c;
   05C5 2A 24 00      [16] 1081 	lhld	_string
   05C8 23            [ 6] 1082 	inx 	h
   05C9 22 24 00      [16] 1083 	shld	_string
   05CC 2B            [ 6] 1084 	dcx 	h
   05CD E5            [12] 1085 	push	h
   05CE 21 06 00      [10] 1086 	lxi 	h,#6
   05D1 39            [10] 1087 	dad 	sp
   05D2 CD 00 00      [18] 1088 	call	ccgchar
   05D5 D1            [10] 1089 	pop 	d
   05D6 7D            [ 4] 1090 	mov 	a,l
   05D7 12            [ 7] 1091 	stax	d
   05D8                    1092 $46:
                           1093 ;}
   05D8                    1094 $44:
   05D8 C9            [10] 1095 	ret
                           1096 		.area  SMALLC_GENERATED_DATA  (REL,CON,DSEG)
                           1097 	.globl	ccargc
   0020                    1098 ccargc:
   0020 00 00              1099 	.dw	#0
                           1100 	.globl	buffer
   0022                    1101 buffer:
   0022 00 00              1102 	.dw	#0
                           1103 	.globl	_string
   0024                    1104 _string:
   0024 00 00              1105 	.dw	#0
                           1106 	.globl	fprintf
                           1107 	.globl	_print
                           1108 	.globl	printf
                           1109 	.globl	sprintf
                           1110 	.globl	_outc
                           1111 	;extrn	isdigit
                           1112 	;extrn	atoi
                           1113 	;extrn	itoa
                           1114 	;extrn	utoab
                           1115 	;extrn	strlen
                           1116 	;extrn	fputc
                           1117 
                           1118 ;0 error(s) in compilation
                           1119 ;	literal pool:0
                           1120 ;	global pool:14
                           1121 ;	Macro pool:103
                           1122 	;	.end
