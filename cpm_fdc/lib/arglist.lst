                              1 ; Small C 8080
                              2 ;	Coder (2.4,84/11/27)
                              3 ;	Front End (2.7,84/11/28)
                              4 ;	Front End for ASXXXX (2.8,13/01/20)
                              5 		;program area SMALLC_GENERATED is RELOCATABLE
                              6 		.module SMALLC_GENERATED
                              7 		.list   (err, loc, bin, eqt, cyc, lin, src, lst, md)
                              8 		.nlist  (pag)
                              9 		.area  SMALLC_GENERATED  (REL,CON,CSEG)
                             10 ;/*      Interpret CPM argument list to produce C style
                             11 ;        argc/argv
                             12 ;        default dma buffer has it, form:
                             13 ;        ---------------------------------
                             14 ;        |count|characters  ...          |
                             15 ;        ---------------------------------
                             16 ; */
                             17 ;int Xargc;
                             18 ;int Xargv[30];
                             19 ;Xarglist(char *ap) {
   0000                      20 Xarglist:
                             21 ;    char qc;
   0000 3B            [ 6]   22 	dcx 	sp
                             23 ;    Xargc = 0;
   0001 21 00 00      [10]   24 	lxi 	h,#0
   0004 22 05 00      [16]   25 	shld	Xargc
                             26 ;    ap[(*ap) + 1] = '\0';
   0007 21 03 00      [10]   27 	lxi 	h,#3
   000A 39            [10]   28 	dad 	sp
   000B CD 00 00      [18]   29 	call	ccgint
   000E E5            [12]   30 	push	h
   000F 21 05 00      [10]   31 	lxi 	h,#5
   0012 39            [10]   32 	dad 	sp
   0013 CD 00 00      [18]   33 	call	ccgint
   0016 CD 00 00      [18]   34 	call	ccgchar
   0019 E5            [12]   35 	push	h
   001A 21 01 00      [10]   36 	lxi 	h,#1
   001D D1            [10]   37 	pop 	d
   001E 19            [10]   38 	dad 	d
   001F D1            [10]   39 	pop 	d
   0020 19            [10]   40 	dad 	d
   0021 E5            [12]   41 	push	h
   0022 21 00 00      [10]   42 	lxi 	h,#0
   0025 D1            [10]   43 	pop 	d
   0026 7D            [ 4]   44 	mov 	a,l
   0027 12            [ 7]   45 	stax	d
                             46 ;    ap++;
   0028 21 03 00      [10]   47 	lxi 	h,#3
   002B 39            [10]   48 	dad 	sp
   002C E5            [12]   49 	push	h
   002D CD 00 00      [18]   50 	call	ccgint
   0030 23            [ 6]   51 	inx 	h
   0031 D1            [10]   52 	pop 	d
   0032 CD 00 00      [18]   53 	call	ccpint
   0035 2B            [ 6]   54 	dcx 	h
                             55 ;    while (isspace(*ap)) ap++;
   0036                      56 $2:
   0036 21 03 00      [10]   57 	lxi 	h,#3
   0039 39            [10]   58 	dad 	sp
   003A CD 00 00      [18]   59 	call	ccgint
   003D CD 00 00      [18]   60 	call	ccgchar
   0040 E5            [12]   61 	push	h
   0041 3E 01         [ 7]   62 	mvi 	a,#1
   0043 CD 00 00      [18]   63 	call	isspace
   0046 C1            [10]   64 	pop 	b
   0047 7C            [ 4]   65 	mov 	a,h
   0048 B5            [ 4]   66 	ora 	l
   0049 CA 5D 00      [10]   67 	jz  	$3
   004C 21 03 00      [10]   68 	lxi 	h,#3
   004F 39            [10]   69 	dad 	sp
   0050 E5            [12]   70 	push	h
   0051 CD 00 00      [18]   71 	call	ccgint
   0054 23            [ 6]   72 	inx 	h
   0055 D1            [10]   73 	pop 	d
   0056 CD 00 00      [18]   74 	call	ccpint
   0059 2B            [ 6]   75 	dcx 	h
   005A C3 36 00      [10]   76 	jmp 	$2
   005D                      77 $3:
                             78 ;    Xargv[Xargc++] = "arg0";
   005D 21 07 00      [10]   79 	lxi 	h,Xargv
   0060 E5            [12]   80 	push	h
   0061 2A 05 00      [16]   81 	lhld	Xargc
   0064 23            [ 6]   82 	inx 	h
   0065 22 05 00      [16]   83 	shld	Xargc
   0068 2B            [ 6]   84 	dcx 	h
   0069 29            [10]   85 	dad 	h
   006A D1            [10]   86 	pop 	d
   006B 19            [10]   87 	dad 	d
   006C E5            [12]   88 	push	h
   006D 21 00 00      [10]   89 	lxi 	h,$0+#0
   0070 D1            [10]   90 	pop 	d
   0071 CD 00 00      [18]   91 	call	ccpint
                             92 ;    if (*ap)
   0074 21 03 00      [10]   93 	lxi 	h,#3
   0077 39            [10]   94 	dad 	sp
   0078 CD 00 00      [18]   95 	call	ccgint
   007B CD 00 00      [18]   96 	call	ccgchar
   007E 7C            [ 4]   97 	mov 	a,h
   007F B5            [ 4]   98 	ora 	l
   0080 CA DF 01      [10]   99 	jz  	$4
                            100 ;        do {
   0083                     101 $5:
                            102 ;            if (*ap == '\'' || *ap == '\"') {
   0083 21 03 00      [10]  103 	lxi 	h,#3
   0086 39            [10]  104 	dad 	sp
   0087 CD 00 00      [18]  105 	call	ccgint
   008A CD 00 00      [18]  106 	call	ccgchar
   008D E5            [12]  107 	push	h
   008E 21 27 00      [10]  108 	lxi 	h,#39
   0091 D1            [10]  109 	pop 	d
   0092 CD 00 00      [18]  110 	call	cceq
   0095 7C            [ 4]  111 	mov 	a,h
   0096 B5            [ 4]  112 	ora 	l
   0097 C2 AC 00      [10]  113 	jnz 	$9
   009A 21 03 00      [10]  114 	lxi 	h,#3
   009D 39            [10]  115 	dad 	sp
   009E CD 00 00      [18]  116 	call	ccgint
   00A1 CD 00 00      [18]  117 	call	ccgchar
   00A4 E5            [12]  118 	push	h
   00A5 21 22 00      [10]  119 	lxi 	h,#34
   00A8 D1            [10]  120 	pop 	d
   00A9 CD 00 00      [18]  121 	call	cceq
   00AC                     122 $9:
   00AC CD 00 00      [18]  123 	call	ccbool
   00AF 7C            [ 4]  124 	mov 	a,h
   00B0 B5            [ 4]  125 	ora 	l
   00B1 CA 28 01      [10]  126 	jz  	$8
                            127 ;                qc = *ap;
   00B4 21 00 00      [10]  128 	lxi 	h,#0
   00B7 39            [10]  129 	dad 	sp
   00B8 E5            [12]  130 	push	h
   00B9 21 05 00      [10]  131 	lxi 	h,#5
   00BC 39            [10]  132 	dad 	sp
   00BD CD 00 00      [18]  133 	call	ccgint
   00C0 CD 00 00      [18]  134 	call	ccgchar
   00C3 D1            [10]  135 	pop 	d
   00C4 7D            [ 4]  136 	mov 	a,l
   00C5 12            [ 7]  137 	stax	d
                            138 ;                Xargv[Xargc++] = ++ap;
   00C6 21 07 00      [10]  139 	lxi 	h,Xargv
   00C9 E5            [12]  140 	push	h
   00CA 2A 05 00      [16]  141 	lhld	Xargc
   00CD 23            [ 6]  142 	inx 	h
   00CE 22 05 00      [16]  143 	shld	Xargc
   00D1 2B            [ 6]  144 	dcx 	h
   00D2 29            [10]  145 	dad 	h
   00D3 D1            [10]  146 	pop 	d
   00D4 19            [10]  147 	dad 	d
   00D5 E5            [12]  148 	push	h
   00D6 21 05 00      [10]  149 	lxi 	h,#5
   00D9 39            [10]  150 	dad 	sp
   00DA E5            [12]  151 	push	h
   00DB CD 00 00      [18]  152 	call	ccgint
   00DE 23            [ 6]  153 	inx 	h
   00DF D1            [10]  154 	pop 	d
   00E0 CD 00 00      [18]  155 	call	ccpint
   00E3 D1            [10]  156 	pop 	d
   00E4 CD 00 00      [18]  157 	call	ccpint
                            158 ;                while (*ap&&*ap != qc) ap++;
   00E7                     159 $10:
   00E7 21 03 00      [10]  160 	lxi 	h,#3
   00EA 39            [10]  161 	dad 	sp
   00EB CD 00 00      [18]  162 	call	ccgint
   00EE CD 00 00      [18]  163 	call	ccgchar
   00F1 7C            [ 4]  164 	mov 	a,h
   00F2 B5            [ 4]  165 	ora 	l
   00F3 CA 0C 01      [10]  166 	jz  	$12
   00F6 21 03 00      [10]  167 	lxi 	h,#3
   00F9 39            [10]  168 	dad 	sp
   00FA CD 00 00      [18]  169 	call	ccgint
   00FD CD 00 00      [18]  170 	call	ccgchar
   0100 E5            [12]  171 	push	h
   0101 21 02 00      [10]  172 	lxi 	h,#2
   0104 39            [10]  173 	dad 	sp
   0105 CD 00 00      [18]  174 	call	ccgchar
   0108 D1            [10]  175 	pop 	d
   0109 CD 00 00      [18]  176 	call	ccne
   010C                     177 $12:
   010C CD 00 00      [18]  178 	call	ccbool
   010F 7C            [ 4]  179 	mov 	a,h
   0110 B5            [ 4]  180 	ora 	l
   0111 CA 25 01      [10]  181 	jz  	$11
   0114 21 03 00      [10]  182 	lxi 	h,#3
   0117 39            [10]  183 	dad 	sp
   0118 E5            [12]  184 	push	h
   0119 CD 00 00      [18]  185 	call	ccgint
   011C 23            [ 6]  186 	inx 	h
   011D D1            [10]  187 	pop 	d
   011E CD 00 00      [18]  188 	call	ccpint
   0121 2B            [ 6]  189 	dcx 	h
   0122 C3 E7 00      [10]  190 	jmp 	$10
   0125                     191 $11:
                            192 ;            } else {
   0125 C3 7F 01      [10]  193 	jmp 	$13
   0128                     194 $8:
                            195 ;                Xargv[Xargc++] = ap;
   0128 21 07 00      [10]  196 	lxi 	h,Xargv
   012B E5            [12]  197 	push	h
   012C 2A 05 00      [16]  198 	lhld	Xargc
   012F 23            [ 6]  199 	inx 	h
   0130 22 05 00      [16]  200 	shld	Xargc
   0133 2B            [ 6]  201 	dcx 	h
   0134 29            [10]  202 	dad 	h
   0135 D1            [10]  203 	pop 	d
   0136 19            [10]  204 	dad 	d
   0137 E5            [12]  205 	push	h
   0138 21 05 00      [10]  206 	lxi 	h,#5
   013B 39            [10]  207 	dad 	sp
   013C CD 00 00      [18]  208 	call	ccgint
   013F D1            [10]  209 	pop 	d
   0140 CD 00 00      [18]  210 	call	ccpint
                            211 ;                while (*ap&&!isspace(*ap)) ap++;
   0143                     212 $14:
   0143 21 03 00      [10]  213 	lxi 	h,#3
   0146 39            [10]  214 	dad 	sp
   0147 CD 00 00      [18]  215 	call	ccgint
   014A CD 00 00      [18]  216 	call	ccgchar
   014D 7C            [ 4]  217 	mov 	a,h
   014E B5            [ 4]  218 	ora 	l
   014F CA 66 01      [10]  219 	jz  	$16
   0152 21 03 00      [10]  220 	lxi 	h,#3
   0155 39            [10]  221 	dad 	sp
   0156 CD 00 00      [18]  222 	call	ccgint
   0159 CD 00 00      [18]  223 	call	ccgchar
   015C E5            [12]  224 	push	h
   015D 3E 01         [ 7]  225 	mvi 	a,#1
   015F CD 00 00      [18]  226 	call	isspace
   0162 C1            [10]  227 	pop 	b
   0163 CD 00 00      [18]  228 	call	cclneg
   0166                     229 $16:
   0166 CD 00 00      [18]  230 	call	ccbool
   0169 7C            [ 4]  231 	mov 	a,h
   016A B5            [ 4]  232 	ora 	l
   016B CA 7F 01      [10]  233 	jz  	$15
   016E 21 03 00      [10]  234 	lxi 	h,#3
   0171 39            [10]  235 	dad 	sp
   0172 E5            [12]  236 	push	h
   0173 CD 00 00      [18]  237 	call	ccgint
   0176 23            [ 6]  238 	inx 	h
   0177 D1            [10]  239 	pop 	d
   0178 CD 00 00      [18]  240 	call	ccpint
   017B 2B            [ 6]  241 	dcx 	h
   017C C3 43 01      [10]  242 	jmp 	$14
   017F                     243 $15:
                            244 ;            }
   017F                     245 $13:
                            246 ;            if (!*ap) break;
   017F 21 03 00      [10]  247 	lxi 	h,#3
   0182 39            [10]  248 	dad 	sp
   0183 CD 00 00      [18]  249 	call	ccgint
   0186 CD 00 00      [18]  250 	call	ccgchar
   0189 CD 00 00      [18]  251 	call	cclneg
   018C 7C            [ 4]  252 	mov 	a,h
   018D B5            [ 4]  253 	ora 	l
   018E CA 94 01      [10]  254 	jz  	$17
   0191 C3 DF 01      [10]  255 	jmp 	$7
                            256 ;            *ap++ = '\0';
   0194                     257 $17:
   0194 21 03 00      [10]  258 	lxi 	h,#3
   0197 39            [10]  259 	dad 	sp
   0198 E5            [12]  260 	push	h
   0199 CD 00 00      [18]  261 	call	ccgint
   019C 23            [ 6]  262 	inx 	h
   019D D1            [10]  263 	pop 	d
   019E CD 00 00      [18]  264 	call	ccpint
   01A1 2B            [ 6]  265 	dcx 	h
   01A2 E5            [12]  266 	push	h
   01A3 21 00 00      [10]  267 	lxi 	h,#0
   01A6 D1            [10]  268 	pop 	d
   01A7 7D            [ 4]  269 	mov 	a,l
   01A8 12            [ 7]  270 	stax	d
                            271 ;            while (isspace(*ap)) ap++;
   01A9                     272 $18:
   01A9 21 03 00      [10]  273 	lxi 	h,#3
   01AC 39            [10]  274 	dad 	sp
   01AD CD 00 00      [18]  275 	call	ccgint
   01B0 CD 00 00      [18]  276 	call	ccgchar
   01B3 E5            [12]  277 	push	h
   01B4 3E 01         [ 7]  278 	mvi 	a,#1
   01B6 CD 00 00      [18]  279 	call	isspace
   01B9 C1            [10]  280 	pop 	b
   01BA 7C            [ 4]  281 	mov 	a,h
   01BB B5            [ 4]  282 	ora 	l
   01BC CA D0 01      [10]  283 	jz  	$19
   01BF 21 03 00      [10]  284 	lxi 	h,#3
   01C2 39            [10]  285 	dad 	sp
   01C3 E5            [12]  286 	push	h
   01C4 CD 00 00      [18]  287 	call	ccgint
   01C7 23            [ 6]  288 	inx 	h
   01C8 D1            [10]  289 	pop 	d
   01C9 CD 00 00      [18]  290 	call	ccpint
   01CC 2B            [ 6]  291 	dcx 	h
   01CD C3 A9 01      [10]  292 	jmp 	$18
   01D0                     293 $19:
                            294 ;        } while (*ap);
   01D0                     295 $6:
   01D0 21 03 00      [10]  296 	lxi 	h,#3
   01D3 39            [10]  297 	dad 	sp
   01D4 CD 00 00      [18]  298 	call	ccgint
   01D7 CD 00 00      [18]  299 	call	ccgchar
   01DA 7C            [ 4]  300 	mov 	a,h
   01DB B5            [ 4]  301 	ora 	l
   01DC C2 83 00      [10]  302 	jnz 	$5
   01DF                     303 $7:
                            304 ;    Xargv[Xargc] = 0;
   01DF                     305 $4:
   01DF 21 07 00      [10]  306 	lxi 	h,Xargv
   01E2 E5            [12]  307 	push	h
   01E3 2A 05 00      [16]  308 	lhld	Xargc
   01E6 29            [10]  309 	dad 	h
   01E7 D1            [10]  310 	pop 	d
   01E8 19            [10]  311 	dad 	d
   01E9 E5            [12]  312 	push	h
   01EA 21 00 00      [10]  313 	lxi 	h,#0
   01ED D1            [10]  314 	pop 	d
   01EE CD 00 00      [18]  315 	call	ccpint
                            316 ;}
   01F1                     317 $1:
   01F1 33            [ 6]  318 	inx 	sp
   01F2 C9            [10]  319 	ret
                            320 		.area  SMALLC_GENERATED_DATA  (REL,CON,DSEG)
   0000 61 72 67 30 00      321 $0:	.db	#97,#114,#103,#48,#0
                            322 	.globl	Xargc
   0005                     323 Xargc:
   0005 00 00               324 	.dw	#0
                            325 	.globl	Xargv
   0007                     326 Xargv:
   0007 00 00 00 00 00 00   327 	.dw	#0,#0,#0,#0,#0,#0,#0,#0,#0,#0
        00 00 00 00 00 00
        00 00 00 00 00 00
        00 00
   001B 00 00 00 00 00 00   328 	.dw	#0,#0,#0,#0,#0,#0,#0,#0,#0,#0
        00 00 00 00 00 00
        00 00 00 00 00 00
        00 00
   002F 00 00 00 00 00 00   329 	.dw	#0,#0,#0,#0,#0,#0,#0,#0,#0,#0
        00 00 00 00 00 00
        00 00 00 00 00 00
        00 00
                            330 	.globl	Xarglist
                            331 	;extrn	isspace
                            332 
                            333 ;0 error(s) in compilation
                            334 ;	literal pool:5
                            335 ;	global pool:4
                            336 ;	Macro pool:51
                            337 	;	.end
